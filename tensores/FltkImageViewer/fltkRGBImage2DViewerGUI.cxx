// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "fltkRGBImage2DViewerGUI.h"

void fltkRGBImage2DViewerGUI::cb_Min_i(Fl_Value_Slider* o, void*) {
  SetMin( o->value() );
}
void fltkRGBImage2DViewerGUI::cb_Min(Fl_Value_Slider* o, void* v) {
  ((fltkRGBImage2DViewerGUI*)(o->parent()->user_data()))->cb_Min_i(o,v);
}

void fltkRGBImage2DViewerGUI::cb_Max_i(Fl_Value_Slider* o, void*) {
  SetMax( o->value() );
}
void fltkRGBImage2DViewerGUI::cb_Max(Fl_Value_Slider* o, void* v) {
  ((fltkRGBImage2DViewerGUI*)(o->parent()->user_data()))->cb_Max_i(o,v);
}

fltkRGBImage2DViewerGUI::fltkRGBImage2DViewerGUI() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = externalWindow = new Fl_Double_Window(454, 367);
    w = o;
    o->user_data((void*)(this));
    { fltk::RGBImage2DViewerWindow* o = imageViewer = new fltk::RGBImage2DViewerWindow(0, 0, 450, 365);
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
    }
    o->end();
    o->resizable(o);
  }
  { Fl_Double_Window* o = intensityWindow = new Fl_Double_Window(553, 105, "Intensity Windowing");
    w = o;
    o->user_data((void*)(this));
    { Fl_Value_Slider* o = new Fl_Value_Slider(60, 25, 460, 25, "Min ");
      o->type(1);
      o->step(0.01);
      o->callback((Fl_Callback*)cb_Min);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Value_Slider* o = new Fl_Value_Slider(60, 55, 460, 25, "Max ");
      o->type(1);
      o->step(0.01);
      o->callback((Fl_Callback*)cb_Max);
      o->align(FL_ALIGN_LEFT);
    }
    o->end();
  }
}

fltkRGBImage2DViewerGUI::~fltkRGBImage2DViewerGUI() {
}

void fltkRGBImage2DViewerGUI::SetLabel(const char *label) {
  externalWindow->label( label );
}

void fltkRGBImage2DViewerGUI::Show(void) {
  externalWindow->show();
imageViewer->show();
}

void fltkRGBImage2DViewerGUI::Hide(void) {
  externalWindow->hide();
}

void fltkRGBImage2DViewerGUI::Redraw(void) {
  imageViewer->redraw();
Fl::check();
}

void fltkRGBImage2DViewerGUI::SetMin(double val) {
}

void fltkRGBImage2DViewerGUI::SetMax(double val) {
}

void fltkRGBImage2DViewerGUI::Update(void) {
}
