// generated by Fast Light User Interface Designer (fluid) version 1.0107

#ifndef fltkFrustumFunctionControlGUI_h
#define fltkFrustumFunctionControlGUI_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Adjuster.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Roller.H>

class fltkFrustumFunctionControlGUI {
public:
  fltkFrustumFunctionControlGUI();
  Fl_Double_Window *controlWindow;
  Fl_Value_Output *angleZValueOutput;
  Fl_Adjuster *xAdjuster;
private:
  void cb_xAdjuster_i(Fl_Adjuster*, void*);
  static void cb_xAdjuster(Fl_Adjuster*, void*);
public:
  Fl_Value_Output *xValueOutput;
  Fl_Adjuster *yAdjuster;
private:
  void cb_yAdjuster_i(Fl_Adjuster*, void*);
  static void cb_yAdjuster(Fl_Adjuster*, void*);
public:
  Fl_Value_Output *yValueOutput;
  Fl_Adjuster *zAdjuster;
private:
  void cb_zAdjuster_i(Fl_Adjuster*, void*);
  static void cb_zAdjuster(Fl_Adjuster*, void*);
public:
  Fl_Value_Output *zValueOutput;
  Fl_Roller *angleZRoller;
private:
  void cb_angleZRoller_i(Fl_Roller*, void*);
  static void cb_angleZRoller(Fl_Roller*, void*);
public:
  Fl_Roller *apertureAngleXRoller;
private:
  void cb_apertureAngleXRoller_i(Fl_Roller*, void*);
  static void cb_apertureAngleXRoller(Fl_Roller*, void*);
public:
  Fl_Value_Output *apertureAngleXValueOutput;
  Fl_Roller *apertureAngleYRoller;
private:
  void cb_apertureAngleYRoller_i(Fl_Roller*, void*);
  static void cb_apertureAngleYRoller(Fl_Roller*, void*);
public:
  Fl_Value_Output *apertureAngleYValueOutput;
  Fl_Adjuster *topPlaneAdjuster;
private:
  void cb_topPlaneAdjuster_i(Fl_Adjuster*, void*);
  static void cb_topPlaneAdjuster(Fl_Adjuster*, void*);
public:
  Fl_Value_Output *topPlaneValueOutput;
  Fl_Value_Output *bottomPlaneValueOutput;
  Fl_Adjuster *bottomPlaneAdjuster;
private:
  void cb_bottomPlaneAdjuster_i(Fl_Adjuster*, void*);
  static void cb_bottomPlaneAdjuster(Fl_Adjuster*, void*);
public:
  virtual ~fltkFrustumFunctionControlGUI();
  virtual void SetAngleZ( double radius );
  virtual void SetApexX( double x );
  virtual void SetApexY( double y );
  virtual void SetApexZ( double z );
  virtual void Show(void);
  virtual void Hide(void);
  virtual void SetApertureAngleX( double radius );
  virtual void SetApertureAngleY( double radius );
  virtual void SetBottomPlane( double radius );
  virtual void SetTopPlane( double radius );
};
#endif
