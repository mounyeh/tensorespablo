// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "fltkRegularStepGradientDescentGUI.h"

void RegularStepGradientDescentGUI::cb_minimumStepLengthValuator_i(Fl_Value_Input* o, void*) {
  SetMinimumStepLength( o->value() );
}
void RegularStepGradientDescentGUI::cb_minimumStepLengthValuator(Fl_Value_Input* o, void* v) {
  ((RegularStepGradientDescentGUI*)(o->parent()->user_data()))->cb_minimumStepLengthValuator_i(o,v);
}

void RegularStepGradientDescentGUI::cb_maximumStepLengthValuator_i(Fl_Value_Input* o, void*) {
  SetMaximumStepLength( o->value() );
}
void RegularStepGradientDescentGUI::cb_maximumStepLengthValuator(Fl_Value_Input* o, void* v) {
  ((RegularStepGradientDescentGUI*)(o->parent()->user_data()))->cb_maximumStepLengthValuator_i(o,v);
}

void RegularStepGradientDescentGUI::cb_gradientMagnitudeToleranceValuator_i(Fl_Value_Input* o, void*) {
  SetGradientMagnitudeTolerance( o->value() );
}
void RegularStepGradientDescentGUI::cb_gradientMagnitudeToleranceValuator(Fl_Value_Input* o, void* v) {
  ((RegularStepGradientDescentGUI*)(o->parent()->user_data()))->cb_gradientMagnitudeToleranceValuator_i(o,v);
}

void RegularStepGradientDescentGUI::cb_maximumNumberOfIterationsCounter_i(Fl_Counter* o, void*) {
  SetMaximumNumberOfIterations( (unsigned long) o->value() );
}
void RegularStepGradientDescentGUI::cb_maximumNumberOfIterationsCounter(Fl_Counter* o, void* v) {
  ((RegularStepGradientDescentGUI*)(o->parent()->user_data()))->cb_maximumNumberOfIterationsCounter_i(o,v);
}

void RegularStepGradientDescentGUI::cb_Start_i(Fl_Button*, void*) {
  StartOptimization();
}
void RegularStepGradientDescentGUI::cb_Start(Fl_Button* o, void* v) {
  ((RegularStepGradientDescentGUI*)(o->parent()->user_data()))->cb_Start_i(o,v);
}

void RegularStepGradientDescentGUI::cb_Stop_i(Fl_Button*, void*) {
  StopOptimization();
}
void RegularStepGradientDescentGUI::cb_Stop(Fl_Button* o, void* v) {
  ((RegularStepGradientDescentGUI*)(o->parent()->user_data()))->cb_Stop_i(o,v);
}

void RegularStepGradientDescentGUI::cb_Resume_i(Fl_Button*, void*) {
  ResumeOptimization();
}
void RegularStepGradientDescentGUI::cb_Resume(Fl_Button* o, void* v) {
  ((RegularStepGradientDescentGUI*)(o->parent()->user_data()))->cb_Resume_i(o,v);
}

void RegularStepGradientDescentGUI::cb_Close_i(Fl_Button*, void*) {
  controlPanel->hide();
}
void RegularStepGradientDescentGUI::cb_Close(Fl_Button* o, void* v) {
  ((RegularStepGradientDescentGUI*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

RegularStepGradientDescentGUI::RegularStepGradientDescentGUI() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = controlPanel = new Fl_Double_Window(248, 273);
    w = o;
    o->user_data((void*)(this));
    { Fl_Value_Input* o = minimumStepLengthValuator = new Fl_Value_Input(165, 25, 65, 25, "Minimum Step : ");
      o->value(0.01);
      o->callback((Fl_Callback*)cb_minimumStepLengthValuator);
    }
    { Fl_Value_Input* o = maximumStepLengthValuator = new Fl_Value_Input(165, 52, 65, 25, "Maximum Step : ");
      o->value(1);
      o->callback((Fl_Callback*)cb_maximumStepLengthValuator);
    }
    { Fl_Value_Input* o = gradientMagnitudeToleranceValuator = new Fl_Value_Input(165, 79, 65, 25, "Gradient Tolerance : ");
      o->value(1);
      o->callback((Fl_Callback*)cb_gradientMagnitudeToleranceValuator);
    }
    { Fl_Counter* o = maximumNumberOfIterationsCounter = new Fl_Counter(130, 109, 102, 25, "Max. Iterations :");
      o->minimum(1);
      o->maximum(10000);
      o->step(1);
      o->value(20);
      o->callback((Fl_Callback*)cb_maximumNumberOfIterationsCounter);
      o->align(FL_ALIGN_LEFT);
      o->lstep(10);
    }
    { Fl_Button* o = new Fl_Button(25, 160, 65, 25, "Start");
      o->callback((Fl_Callback*)cb_Start);
    }
    { Fl_Button* o = new Fl_Button(98, 160, 65, 25, "Stop");
      o->callback((Fl_Callback*)cb_Stop);
    }
    { Fl_Button* o = new Fl_Button(170, 160, 65, 25, "Resume");
      o->callback((Fl_Callback*)cb_Resume);
    }
    { Fl_Button* o = new Fl_Button(85, 230, 85, 25, "Close");
      o->callback((Fl_Callback*)cb_Close);
    }
    o->end();
  }
}

RegularStepGradientDescentGUI::~RegularStepGradientDescentGUI() {
}

void RegularStepGradientDescentGUI::SetMaximumStepLength( double ) {
}

void RegularStepGradientDescentGUI::SetMinimumStepLength( double ) {
}

void RegularStepGradientDescentGUI::SetGradientMagnitudeTolerance( double ) {
}

void RegularStepGradientDescentGUI::SetMaximumNumberOfIterations( double ) {
}

void RegularStepGradientDescentGUI::StartOptimization(void) {
}

void RegularStepGradientDescentGUI::StopOptimization(void) {
}

void RegularStepGradientDescentGUI::ResumeOptimization(void) {
}

void RegularStepGradientDescentGUI::Hide(void) {
  controlPanel->hide();
}

void RegularStepGradientDescentGUI::Show(void) {
  controlPanel->show();
}
