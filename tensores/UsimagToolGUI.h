// generated by Fast Light User Interface Designer (fluid) version 1.0107

#ifndef UsimagToolGUI_h
#define UsimagToolGUI_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include "UsimagToolBase.h"
#include <FL/Fl_Group.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Menu_Bar.H>
#include "Viewer3D.h"
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Text_Display.H>
#include <FL/Fl_Round_Button.H>
#include "MyfltkImageViewer.h"
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Choice.H>
#include "MyfltkColorImageViewer.h"
#include <fltkProgressBar.h>
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Counter.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Slider.H>
#include "TensorConsole.h"
#include "SegmentationConsole.h"
#include "FilteringConsole.h"
#include "BasicOpConsole.h"
#include <FL/Fl_Input.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Scroll.H>

class UsimagToolGUI : public UsimagToolBase {
public:
  UsimagToolGUI();
  Fl_Double_Window *panel;
private:
  void cb_3D_i(Fl_Button*, void*);
  static void cb_3D(Fl_Button*, void*);
  void cb_4x2D_i(Fl_Button*, void*);
  static void cb_4x2D(Fl_Button*, void*);
  void cb_3_i(Fl_Button*, void*);
  static void cb_3(Fl_Button*, void*);
public:
  Fl_Menu_Bar *UsimagToolMainMenu;
  static Fl_Menu_Item menu_UsimagToolMainMenu[];
  static Fl_Menu_Item *UsimagToolSubmenu;
  static Fl_Menu_Item *PreferencesMenuItem;
private:
  void cb_PreferencesMenuItem_i(Fl_Menu_*, void*);
  static void cb_PreferencesMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *QuitMenuItem;
private:
  void cb_QuitMenuItem_i(Fl_Menu_*, void*);
  static void cb_QuitMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *FileSubMenu;
  static Fl_Menu_Item *OpenMenuItem;
private:
  void cb_OpenMenuItem_i(Fl_Menu_*, void*);
  static void cb_OpenMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *OpenTensorMenuItem;
private:
  void cb_OpenTensorMenuItem_i(Fl_Menu_*, void*);
  static void cb_OpenTensorMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *OpenDWIMenuItem;
private:
  void cb_OpenDWIMenuItem_i(Fl_Menu_*, void*);
  static void cb_OpenDWIMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *OpenRawMenuItem;
private:
  void cb_OpenRawMenuItem_i(Fl_Menu_*, void*);
  static void cb_OpenRawMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *OpenModelMenuItem;
private:
  void cb_OpenModelMenuItem_i(Fl_Menu_*, void*);
  static void cb_OpenModelMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SaveMenuItem;
private:
  void cb_SaveMenuItem_i(Fl_Menu_*, void*);
  static void cb_SaveMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SaveModelMenuItem;
private:
  void cb_SaveModelMenuItem_i(Fl_Menu_*, void*);
  static void cb_SaveModelMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SaveAsMenuItem;
  static Fl_Menu_Item *SaveTensorVTKMenuItem;
private:
  void cb_SaveTensorVTKMenuItem_i(Fl_Menu_*, void*);
  static void cb_SaveTensorVTKMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SaveTensorMenuItem;
private:
  void cb_SaveTensorMenuItem_i(Fl_Menu_*, void*);
  static void cb_SaveTensorMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SaveOverlayMenuItem;
private:
  void cb_SaveOverlayMenuItem_i(Fl_Menu_*, void*);
  static void cb_SaveOverlayMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *LoadOverlayMenuItem;
private:
  void cb_LoadOverlayMenuItem_i(Fl_Menu_*, void*);
  static void cb_LoadOverlayMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SaveDWIMenuItem;
private:
  void cb_SaveDWIMenuItem_i(Fl_Menu_*, void*);
  static void cb_SaveDWIMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ImageSubMenu;
  static Fl_Menu_Item *ModeMenuItem;
  static Fl_Menu_Item *FlipMenuItem;
  static Fl_Menu_Item *ShiftMenuItem;
  static Fl_Menu_Item *LowerIntensityMenuItem;
  static Fl_Menu_Item *UpperIntensityMenuItem;
  static Fl_Menu_Item *TrasposeMenuItem;
  static Fl_Menu_Item *ViewSubMenu;
private:
  void cb_4x2D1_i(Fl_Menu_*, void*);
  static void cb_4x2D1(Fl_Menu_*, void*);
  void cb_3x2D_i(Fl_Menu_*, void*);
  static void cb_3x2D(Fl_Menu_*, void*);
  void cb_3D1_i(Fl_Menu_*, void*);
  static void cb_3D1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *BasicOpSubMenu;
  static Fl_Menu_Item *AddMenuItem;
private:
  void cb_AddMenuItem_i(Fl_Menu_*, void*);
  static void cb_AddMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DifferenceMenuItem;
private:
  void cb_DifferenceMenuItem_i(Fl_Menu_*, void*);
  static void cb_DifferenceMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *MultiplyMenuItem;
private:
  void cb_MultiplyMenuItem_i(Fl_Menu_*, void*);
  static void cb_MultiplyMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DameroMenuItem;
  static Fl_Menu_Item *ErosionMenuItem;
private:
  void cb_ErosionMenuItem_i(Fl_Menu_*, void*);
  static void cb_ErosionMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DilationMenuItem;
private:
  void cb_DilationMenuItem_i(Fl_Menu_*, void*);
  static void cb_DilationMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *GradientMenuItem;
private:
  void cb_GradientMenuItem_i(Fl_Menu_*, void*);
  static void cb_GradientMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *RescaleMenuItem;
private:
  void cb_RescaleMenuItem_i(Fl_Menu_*, void*);
  static void cb_RescaleMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *RelabelSubSubMenu;
  static Fl_Menu_Item *RelabelImageMenuItem;
private:
  void cb_RelabelImageMenuItem_i(Fl_Menu_*, void*);
  static void cb_RelabelImageMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *RelabelComponentMenuItem;
private:
  void cb_RelabelComponentMenuItem_i(Fl_Menu_*, void*);
  static void cb_RelabelComponentMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *InverseMenuItem;
private:
  void cb_InverseMenuItem_i(Fl_Menu_*, void*);
  static void cb_InverseMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *PointManagementMenuItem;
private:
  void cb_PointManagementMenuItem_i(Fl_Menu_*, void*);
  static void cb_PointManagementMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *FilteringSubMenu;
  static Fl_Menu_Item *MeanMenuItem;
private:
  void cb_MeanMenuItem_i(Fl_Menu_*, void*);
  static void cb_MeanMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *MedianMenuItem;
private:
  void cb_MedianMenuItem_i(Fl_Menu_*, void*);
  static void cb_MedianMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *GaussianMenuItem;
private:
  void cb_GaussianMenuItem_i(Fl_Menu_*, void*);
  static void cb_GaussianMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *BilateralMenuItem;
private:
  void cb_BilateralMenuItem_i(Fl_Menu_*, void*);
  static void cb_BilateralMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *WienerMenuItem;
private:
  void cb_WienerMenuItem_i(Fl_Menu_*, void*);
  static void cb_WienerMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *EdgeSubSubMenu;
  static Fl_Menu_Item *ZeroCrossMenuItem;
private:
  void cb_ZeroCrossMenuItem_i(Fl_Menu_*, void*);
  static void cb_ZeroCrossMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *CannyMenuItem;
private:
  void cb_CannyMenuItem_i(Fl_Menu_*, void*);
  static void cb_CannyMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *AnisotropicSubSubMenu;
  static Fl_Menu_Item *AnCurvatureMenuItem;
private:
  void cb_AnCurvatureMenuItem_i(Fl_Menu_*, void*);
  static void cb_AnCurvatureMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *AnGradientMenuItem;
private:
  void cb_AnGradientMenuItem_i(Fl_Menu_*, void*);
  static void cb_AnGradientMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SRADMenuItem;
private:
  void cb_SRADMenuItem_i(Fl_Menu_*, void*);
  static void cb_SRADMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DPADMenuItem;
private:
  void cb_DPADMenuItem_i(Fl_Menu_*, void*);
  static void cb_DPADMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *TADMenuItem;
private:
  void cb_TADMenuItem_i(Fl_Menu_*, void*);
  static void cb_TADMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DWIFilterMenuItem;
private:
  void cb_DWIFilterMenuItem_i(Fl_Menu_*, void*);
  static void cb_DWIFilterMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *EstimateTensorMenuItem;
private:
  void cb_EstimateTensorMenuItem_i(Fl_Menu_*, void*);
  static void cb_EstimateTensorMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SegmentationSubMenu;
  static Fl_Menu_Item *LevelSetsMenuItem;
private:
  void cb_LevelSetsMenuItem_i(Fl_Menu_*, void*);
  static void cb_LevelSetsMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ThresholdMenutem;
private:
  void cb_ThresholdMenutem_i(Fl_Menu_*, void*);
  static void cb_ThresholdMenutem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *KNNMenuItem;
private:
  void cb_KNNMenuItem_i(Fl_Menu_*, void*);
  static void cb_KNNMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *MRFUSMenuItem;
private:
  void cb_MRFUSMenuItem_i(Fl_Menu_*, void*);
  static void cb_MRFUSMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *WatershedMenuItem;
private:
  void cb_WatershedMenuItem_i(Fl_Menu_*, void*);
  static void cb_WatershedMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *RegistrationSubMenu;
  static Fl_Menu_Item *DemonsMenuItem;
private:
  void cb_DemonsMenuItem_i(Fl_Menu_*, void*);
  static void cb_DemonsMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *TPSMenuItem;
  static Fl_Menu_Item *DTISubMenu;
  static Fl_Menu_Item *DTIDisplayMenuItem;
private:
  void cb_DTIDisplayMenuItem_i(Fl_Menu_*, void*);
  static void cb_DTIDisplayMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DTITractographyMenuItem;
private:
  void cb_DTITractographyMenuItem_i(Fl_Menu_*, void*);
  static void cb_DTITractographyMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DTITractographyAutoMenuItem;
private:
  void cb_DTITractographyAutoMenuItem_i(Fl_Menu_*, void*);
  static void cb_DTITractographyAutoMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DTIBackTraceMenuItem;
private:
  void cb_DTIBackTraceMenuItem_i(Fl_Menu_*, void*);
  static void cb_DTIBackTraceMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DTIFilterDWIMenuItem;
private:
  void cb_DTIFilterDWIMenuItem_i(Fl_Menu_*, void*);
  static void cb_DTIFilterDWIMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DTIEstimateTensorMenuItem;
private:
  void cb_DTIEstimateTensorMenuItem_i(Fl_Menu_*, void*);
  static void cb_DTIEstimateTensorMenuItem(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DTIApplyMask;
private:
  void cb_DTIApplyMask_i(Fl_Menu_*, void*);
  static void cb_DTIApplyMask(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DTIFiberEdition;
private:
  void cb_DTIFiberEdition_i(Fl_Menu_*, void*);
  static void cb_DTIFiberEdition(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DTIMeasures;
private:
  void cb_DTIMeasures_i(Fl_Menu_*, void*);
  static void cb_DTIMeasures(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DTIProject;
private:
  void cb_DTIProject_i(Fl_Menu_*, void*);
  static void cb_DTIProject(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *HelpSubMenu;
  static Fl_Menu_Item *HelpMenuItem;
  static Fl_Menu_Item *AboutMenuItem;
private:
  void cb_AboutMenuItem_i(Fl_Menu_*, void*);
  static void cb_AboutMenuItem(Fl_Menu_*, void*);
public:
  Fl_Group *m_view3D;
  Viewer3D *ImageViewer3D;
private:
  void cb_Load_i(Fl_Button*, void*);
  static void cb_Load(Fl_Button*, void*);
  void cb_Center_i(Fl_Button*, void*);
  static void cb_Center(Fl_Button*, void*);
  void cb_Color_i(Fl_Button*, void*);
  static void cb_Color(Fl_Button*, void*);
  void cb_Gray_i(Fl_Button*, void*);
  static void cb_Gray(Fl_Button*, void*);
  void cb_opacity_i(Fl_Value_Slider*, void*);
  static void cb_opacity(Fl_Value_Slider*, void*);
  void cb_zoom_i(Fl_Value_Slider*, void*);
  static void cb_zoom(Fl_Value_Slider*, void*);
  void cb__i(Fl_Button*, void*);
  static void cb_(Fl_Button*, void*);
  void cb_1_i(Fl_Button*, void*);
  static void cb_1(Fl_Button*, void*);
public:
  Fl_Value_Slider *sliceCoronal3D;
private:
  void cb_sliceCoronal3D_i(Fl_Value_Slider*, void*);
  static void cb_sliceCoronal3D(Fl_Value_Slider*, void*);
  void cb_2_i(Fl_Button*, void*);
  static void cb_2(Fl_Button*, void*);
  void cb_4_i(Fl_Button*, void*);
  static void cb_4(Fl_Button*, void*);
public:
  Fl_Value_Slider *sliceSagital3D;
private:
  void cb_sliceSagital3D_i(Fl_Value_Slider*, void*);
  static void cb_sliceSagital3D(Fl_Value_Slider*, void*);
  void cb_5_i(Fl_Button*, void*);
  static void cb_5(Fl_Button*, void*);
  void cb_6_i(Fl_Button*, void*);
  static void cb_6(Fl_Button*, void*);
public:
  Fl_Value_Slider *sliceAxial3D;
private:
  void cb_sliceAxial3D_i(Fl_Value_Slider*, void*);
  static void cb_sliceAxial3D(Fl_Value_Slider*, void*);
  void cb_7_i(Fl_Button*, void*);
  static void cb_7(Fl_Button*, void*);
  void cb_8_i(Fl_Button*, void*);
  static void cb_8(Fl_Button*, void*);
  void cb_Coronal_i(Fl_Round_Button*, void*);
  static void cb_Coronal(Fl_Round_Button*, void*);
  void cb_Sagital_i(Fl_Round_Button*, void*);
  static void cb_Sagital(Fl_Round_Button*, void*);
  void cb_Axial_i(Fl_Round_Button*, void*);
  static void cb_Axial(Fl_Round_Button*, void*);
  void cb_A_i(Fl_Button*, void*);
  static void cb_A(Fl_Button*, void*);
  void cb_P_i(Fl_Button*, void*);
  static void cb_P(Fl_Button*, void*);
  void cb_L_i(Fl_Button*, void*);
  static void cb_L(Fl_Button*, void*);
  void cb_R_i(Fl_Button*, void*);
  static void cb_R(Fl_Button*, void*);
  void cb_I_i(Fl_Button*, void*);
  static void cb_I(Fl_Button*, void*);
  void cb_S_i(Fl_Button*, void*);
  static void cb_S(Fl_Button*, void*);
public:
  Fl_Group *m_viewSplit;
private:
  void cb_sliceNumberSlider_i(Fl_Value_Slider*, void*);
  static void cb_sliceNumberSlider(Fl_Value_Slider*, void*);
  void cb_9_i(Fl_Button*, void*);
  static void cb_9(Fl_Button*, void*);
  void cb_a_i(Fl_Button*, void*);
  static void cb_a(Fl_Button*, void*);
  void cb_m_checkbutton_i(Fl_Check_Button*, void*);
  static void cb_m_checkbutton(Fl_Check_Button*, void*);
  void cb_m_Orientation_i(Fl_Choice*, void*);
  static void cb_m_Orientation(Fl_Choice*, void*);
  void cb_sliceNumberSlider1_i(Fl_Value_Slider*, void*);
  static void cb_sliceNumberSlider1(Fl_Value_Slider*, void*);
  void cb_b_i(Fl_Button*, void*);
  static void cb_b(Fl_Button*, void*);
  void cb_c_i(Fl_Button*, void*);
  static void cb_c(Fl_Button*, void*);
  void cb_m_Orientation1_i(Fl_Choice*, void*);
  static void cb_m_Orientation1(Fl_Choice*, void*);
  void cb_m_checkbutton1_i(Fl_Check_Button*, void*);
  static void cb_m_checkbutton1(Fl_Check_Button*, void*);
public:
  MyViewerType *ImageViewer[3];
private:
  void cb_sliceNumberSlider2_i(Fl_Value_Slider*, void*);
  static void cb_sliceNumberSlider2(Fl_Value_Slider*, void*);
  void cb_d_i(Fl_Button*, void*);
  static void cb_d(Fl_Button*, void*);
  void cb_e_i(Fl_Button*, void*);
  static void cb_e(Fl_Button*, void*);
  void cb_m_Orientation2_i(Fl_Choice*, void*);
  static void cb_m_Orientation2(Fl_Choice*, void*);
  void cb_m_checkbutton2_i(Fl_Check_Button*, void*);
  static void cb_m_checkbutton2(Fl_Check_Button*, void*);
public:
  Fl_Group *glWindowGroup[4];
  MyColorViewerType *ImageColorViewer;
  Fl_Value_Slider *sliceNumberSlider[4];
private:
  void cb_sliceNumberSlider3_i(Fl_Value_Slider*, void*);
  static void cb_sliceNumberSlider3(Fl_Value_Slider*, void*);
  void cb_f_i(Fl_Button*, void*);
  static void cb_f(Fl_Button*, void*);
  void cb_10_i(Fl_Button*, void*);
  static void cb_10(Fl_Button*, void*);
public:
  Fl_Choice *m_Orientation[4];
private:
  void cb_m_Orientation3_i(Fl_Choice*, void*);
  static void cb_m_Orientation3(Fl_Choice*, void*);
public:
  Fl_Check_Button *m_checkbutton[4];
private:
  void cb_m_checkbutton3_i(Fl_Check_Button*, void*);
  static void cb_m_checkbutton3(Fl_Check_Button*, void*);
  void cb_11_i(Fl_Button*, void*);
  static void cb_11(Fl_Button*, void*);
  void cb_v_i(Fl_Button*, void*);
  static void cb_v(Fl_Button*, void*);
  void cb_12_i(Fl_Button*, void*);
  static void cb_12(Fl_Button*, void*);
  void cb_13_i(Fl_Button*, void*);
  static void cb_13(Fl_Button*, void*);
  void cb_P1_i(Fl_Button*, void*);
  static void cb_P1(Fl_Button*, void*);
  void cb_T_i(Fl_Button*, void*);
  static void cb_T(Fl_Button*, void*);
  void cb_14_i(Fl_Button*, void*);
  static void cb_14(Fl_Button*, void*);
  void cb_15_i(Fl_Button*, void*);
  static void cb_15(Fl_Button*, void*);
  void cb_16_i(Fl_Button*, void*);
  static void cb_16(Fl_Button*, void*);
  void cb_17_i(Fl_Button*, void*);
  static void cb_17(Fl_Button*, void*);
  void cb_21_i(Fl_Button*, void*);
  static void cb_21(Fl_Button*, void*);
  void cb_22_i(Fl_Button*, void*);
  static void cb_22(Fl_Button*, void*);
  void cb_c1_i(Fl_Button*, void*);
  static void cb_c1(Fl_Button*, void*);
  void cb_g_i(Fl_Button*, void*);
  static void cb_g(Fl_Button*, void*);
  void cb_RAS_i(Fl_Button*, void*);
  static void cb_RAS(Fl_Button*, void*);
  void cb_m_Ampl_i(Fl_Button*, void*);
  static void cb_m_Ampl(Fl_Button*, void*);
  void cb_m_Dism_i(Fl_Button*, void*);
  static void cb_m_Dism(Fl_Button*, void*);
  void cb_18_i(Fl_Button*, void*);
  static void cb_18(Fl_Button*, void*);
  void cb_v1_i(Fl_Button*, void*);
  static void cb_v1(Fl_Button*, void*);
  void cb_19_i(Fl_Button*, void*);
  static void cb_19(Fl_Button*, void*);
  void cb_1a_i(Fl_Button*, void*);
  static void cb_1a(Fl_Button*, void*);
  void cb_P2_i(Fl_Button*, void*);
  static void cb_P2(Fl_Button*, void*);
  void cb_T1_i(Fl_Button*, void*);
  static void cb_T1(Fl_Button*, void*);
  void cb_1b_i(Fl_Button*, void*);
  static void cb_1b(Fl_Button*, void*);
  void cb_1c_i(Fl_Button*, void*);
  static void cb_1c(Fl_Button*, void*);
  void cb_1d_i(Fl_Button*, void*);
  static void cb_1d(Fl_Button*, void*);
  void cb_1e_i(Fl_Button*, void*);
  static void cb_1e(Fl_Button*, void*);
  void cb_23_i(Fl_Button*, void*);
  static void cb_23(Fl_Button*, void*);
  void cb_24_i(Fl_Button*, void*);
  static void cb_24(Fl_Button*, void*);
  void cb_c2_i(Fl_Button*, void*);
  static void cb_c2(Fl_Button*, void*);
  void cb_g1_i(Fl_Button*, void*);
  static void cb_g1(Fl_Button*, void*);
  void cb_RAS1_i(Fl_Button*, void*);
  static void cb_RAS1(Fl_Button*, void*);
  void cb_m_Ampl1_i(Fl_Button*, void*);
  static void cb_m_Ampl1(Fl_Button*, void*);
  void cb_m_Dism1_i(Fl_Button*, void*);
  static void cb_m_Dism1(Fl_Button*, void*);
  void cb_1f_i(Fl_Button*, void*);
  static void cb_1f(Fl_Button*, void*);
  void cb_v2_i(Fl_Button*, void*);
  static void cb_v2(Fl_Button*, void*);
  void cb_20_i(Fl_Button*, void*);
  static void cb_20(Fl_Button*, void*);
  void cb_25_i(Fl_Button*, void*);
  static void cb_25(Fl_Button*, void*);
  void cb_P3_i(Fl_Button*, void*);
  static void cb_P3(Fl_Button*, void*);
  void cb_T2_i(Fl_Button*, void*);
  static void cb_T2(Fl_Button*, void*);
  void cb_26_i(Fl_Button*, void*);
  static void cb_26(Fl_Button*, void*);
  void cb_27_i(Fl_Button*, void*);
  static void cb_27(Fl_Button*, void*);
  void cb_28_i(Fl_Button*, void*);
  static void cb_28(Fl_Button*, void*);
  void cb_29_i(Fl_Button*, void*);
  static void cb_29(Fl_Button*, void*);
  void cb_2a_i(Fl_Button*, void*);
  static void cb_2a(Fl_Button*, void*);
  void cb_2b_i(Fl_Button*, void*);
  static void cb_2b(Fl_Button*, void*);
  void cb_c3_i(Fl_Button*, void*);
  static void cb_c3(Fl_Button*, void*);
  void cb_g2_i(Fl_Button*, void*);
  static void cb_g2(Fl_Button*, void*);
  void cb_RAS2_i(Fl_Button*, void*);
  static void cb_RAS2(Fl_Button*, void*);
  void cb_m_Ampl2_i(Fl_Button*, void*);
  static void cb_m_Ampl2(Fl_Button*, void*);
  void cb_m_Dism2_i(Fl_Button*, void*);
  static void cb_m_Dism2(Fl_Button*, void*);
public:
  Fl_Group *Botones[4];
private:
  void cb_2c_i(Fl_Button*, void*);
  static void cb_2c(Fl_Button*, void*);
  void cb_v3_i(Fl_Button*, void*);
  static void cb_v3(Fl_Button*, void*);
  void cb_2d_i(Fl_Button*, void*);
  static void cb_2d(Fl_Button*, void*);
  void cb_2e_i(Fl_Button*, void*);
  static void cb_2e(Fl_Button*, void*);
  void cb_P4_i(Fl_Button*, void*);
  static void cb_P4(Fl_Button*, void*);
  void cb_T3_i(Fl_Button*, void*);
  static void cb_T3(Fl_Button*, void*);
  void cb_2f_i(Fl_Button*, void*);
  static void cb_2f(Fl_Button*, void*);
  void cb_30_i(Fl_Button*, void*);
  static void cb_30(Fl_Button*, void*);
  void cb_31_i(Fl_Button*, void*);
  static void cb_31(Fl_Button*, void*);
  void cb_32_i(Fl_Button*, void*);
  static void cb_32(Fl_Button*, void*);
  void cb_210_i(Fl_Button*, void*);
  static void cb_210(Fl_Button*, void*);
  void cb_211_i(Fl_Button*, void*);
  static void cb_211(Fl_Button*, void*);
  void cb_c4_i(Fl_Button*, void*);
  static void cb_c4(Fl_Button*, void*);
  void cb_g3_i(Fl_Button*, void*);
  static void cb_g3(Fl_Button*, void*);
public:
  Fl_Button *m_Ampl[4];
private:
  void cb_m_Ampl3_i(Fl_Button*, void*);
  static void cb_m_Ampl3(Fl_Button*, void*);
public:
  Fl_Button *m_Dism[4];
private:
  void cb_m_Dism3_i(Fl_Button*, void*);
  static void cb_m_Dism3(Fl_Button*, void*);
public:
  fltk::ProgressBar *progressSlider;
  Fl_Value_Output *m_ProgressCounter;
  Fl_Choice *m_tipoProcesado;
private:
  void cb_m_tipoProcesado_i(Fl_Choice*, void*);
  static void cb_m_tipoProcesado(Fl_Choice*, void*);
  void cb_Tract_i(Fl_Button*, void*);
  static void cb_Tract(Fl_Button*, void*);
  void cb_Scalar_i(Fl_Button*, void*);
  static void cb_Scalar(Fl_Button*, void*);
  void cb_Auto_i(Fl_Button*, void*);
  static void cb_Auto(Fl_Button*, void*);
  void cb_Stats_i(Fl_Button*, void*);
  static void cb_Stats(Fl_Button*, void*);
  void cb_Prop_i(Fl_Button*, void*);
  static void cb_Prop(Fl_Button*, void*);
  void cb_Prefs_i(Fl_Button*, void*);
  static void cb_Prefs(Fl_Button*, void*);
public:
  Fl_Group *m_DataGroup;
  Fl_Browser *m_dataBrowser;
private:
  void cb_m_dataBrowser_i(Fl_Browser*, void*);
  static void cb_m_dataBrowser(Fl_Browser*, void*);
  void cb_View_i(Fl_Button*, void*);
  static void cb_View(Fl_Button*, void*);
  void cb_Delete_i(Fl_Button*, void*);
  static void cb_Delete(Fl_Button*, void*);
  void cb_212_i(Fl_Button*, void*);
  static void cb_212(Fl_Button*, void*);
  void cb_213_i(Fl_Button*, void*);
  static void cb_213(Fl_Button*, void*);
  void cb_View1_i(Fl_Button*, void*);
  static void cb_View1(Fl_Button*, void*);
  void cb_Do_i(Fl_Button*, void*);
  static void cb_Do(Fl_Button*, void*);
  void cb_Origen_i(Fl_Button*, void*);
  static void cb_Origen(Fl_Button*, void*);
  void cb_Rename_i(Fl_Button*, void*);
  static void cb_Rename(Fl_Button*, void*);
public:
  Fl_Group *m_TensorDataGroup;
  Fl_Browser *m_tensordataBrowser;
private:
  void cb_m_tensordataBrowser_i(Fl_Browser*, void*);
  static void cb_m_tensordataBrowser(Fl_Browser*, void*);
  void cb_Delete1_i(Fl_Button*, void*);
  static void cb_Delete1(Fl_Button*, void*);
  void cb_214_i(Fl_Button*, void*);
  static void cb_214(Fl_Button*, void*);
  void cb_215_i(Fl_Button*, void*);
  static void cb_215(Fl_Button*, void*);
  void cb_Rename1_i(Fl_Button*, void*);
  static void cb_Rename1(Fl_Button*, void*);
  void cb_Info_i(Fl_Button*, void*);
  static void cb_Info(Fl_Button*, void*);
public:
  Fl_Group *m_ModelDataGroup;
  Fl_Browser *m_modeldataBrowser;
private:
  void cb_m_modeldataBrowser_i(Fl_Browser*, void*);
  static void cb_m_modeldataBrowser(Fl_Browser*, void*);
  void cb_Rename2_i(Fl_Button*, void*);
  static void cb_Rename2(Fl_Button*, void*);
  void cb_Del_i(Fl_Button*, void*);
  static void cb_Del(Fl_Button*, void*);
  void cb_216_i(Fl_Button*, void*);
  static void cb_216(Fl_Button*, void*);
  void cb_217_i(Fl_Button*, void*);
  static void cb_217(Fl_Button*, void*);
  void cb_View2_i(Fl_Button*, void*);
  static void cb_View2(Fl_Button*, void*);
  void cb_Hide_i(Fl_Button*, void*);
  static void cb_Hide(Fl_Button*, void*);
  void cb_Hide1_i(Fl_Button*, void*);
  static void cb_Hide1(Fl_Button*, void*);
  void cb_Prop1_i(Fl_Button*, void*);
  static void cb_Prop1(Fl_Button*, void*);
  void cb_Stats1_i(Fl_Button*, void*);
  static void cb_Stats1(Fl_Button*, void*);
  void cb_Tract1_i(Fl_Button*, void*);
  static void cb_Tract1(Fl_Button*, void*);
public:
  Fl_Group *m_DWIDataGroup;
  Fl_Browser *m_DWIdataBrowser;
private:
  void cb_m_DWIdataBrowser_i(Fl_Browser*, void*);
  static void cb_m_DWIdataBrowser(Fl_Browser*, void*);
  void cb_Rename3_i(Fl_Button*, void*);
  static void cb_Rename3(Fl_Button*, void*);
  void cb_Del1_i(Fl_Button*, void*);
  static void cb_Del1(Fl_Button*, void*);
  void cb_218_i(Fl_Button*, void*);
  static void cb_218(Fl_Button*, void*);
  void cb_219_i(Fl_Button*, void*);
  static void cb_219(Fl_Button*, void*);
  void cb_Get_i(Fl_Button*, void*);
  static void cb_Get(Fl_Button*, void*);
  void cb_Estim_i(Fl_Button*, void*);
  static void cb_Estim(Fl_Button*, void*);
  void cb_Filter_i(Fl_Button*, void*);
  static void cb_Filter(Fl_Button*, void*);
  void cb_Get1_i(Fl_Button*, void*);
  static void cb_Get1(Fl_Button*, void*);
public:
  Fl_Counter *m_comp;
  Fl_Group *m_BasicOperations;
private:
  void cb_33_i(Fl_Button*, void*);
  static void cb_33(Fl_Button*, void*);
  void cb_34_i(Fl_Button*, void*);
  static void cb_34(Fl_Button*, void*);
  void cb_35_i(Fl_Button*, void*);
  static void cb_35(Fl_Button*, void*);
  void cb_36_i(Fl_Button*, void*);
  static void cb_36(Fl_Button*, void*);
  void cb_37_i(Fl_Button*, void*);
  static void cb_37(Fl_Button*, void*);
  void cb_38_i(Fl_Button*, void*);
  static void cb_38(Fl_Button*, void*);
  void cb_39_i(Fl_Button*, void*);
  static void cb_39(Fl_Button*, void*);
  void cb_3a_i(Fl_Button*, void*);
  static void cb_3a(Fl_Button*, void*);
  void cb_3b_i(Fl_Button*, void*);
  static void cb_3b(Fl_Button*, void*);
  void cb_3c_i(Fl_Button*, void*);
  static void cb_3c(Fl_Button*, void*);
  void cb_3d_i(Fl_Button*, void*);
  static void cb_3d(Fl_Button*, void*);
public:
  Fl_Group *m_Filtering;
private:
  void cb_SRAD_i(Fl_Button*, void*);
  static void cb_SRAD(Fl_Button*, void*);
  void cb_TAD_i(Fl_Button*, void*);
  static void cb_TAD(Fl_Button*, void*);
  void cb_Anis_i(Fl_Button*, void*);
  static void cb_Anis(Fl_Button*, void*);
  void cb_Anis1_i(Fl_Button*, void*);
  static void cb_Anis1(Fl_Button*, void*);
  void cb_Gaussian_i(Fl_Button*, void*);
  static void cb_Gaussian(Fl_Button*, void*);
  void cb_Mean_i(Fl_Button*, void*);
  static void cb_Mean(Fl_Button*, void*);
  void cb_Median_i(Fl_Button*, void*);
  static void cb_Median(Fl_Button*, void*);
  void cb_Bilateral_i(Fl_Button*, void*);
  static void cb_Bilateral(Fl_Button*, void*);
  void cb_Wiener_i(Fl_Button*, void*);
  static void cb_Wiener(Fl_Button*, void*);
  void cb_Zero_i(Fl_Button*, void*);
  static void cb_Zero(Fl_Button*, void*);
  void cb_Canny_i(Fl_Button*, void*);
  static void cb_Canny(Fl_Button*, void*);
  void cb_DPAD_i(Fl_Button*, void*);
  static void cb_DPAD(Fl_Button*, void*);
public:
  Fl_Group *m_Segmentation;
private:
  void cb_MRF_i(Fl_Button*, void*);
  static void cb_MRF(Fl_Button*, void*);
  void cb_Level_i(Fl_Button*, void*);
  static void cb_Level(Fl_Button*, void*);
  void cb_Threshold_i(Fl_Button*, void*);
  static void cb_Threshold(Fl_Button*, void*);
  void cb_Watershed_i(Fl_Button*, void*);
  static void cb_Watershed(Fl_Button*, void*);
  void cb_KNN_i(Fl_Button*, void*);
  static void cb_KNN(Fl_Button*, void*);
public:
  Fl_Group *m_Registration;
private:
  void cb_Demons_i(Fl_Button*, void*);
  static void cb_Demons(Fl_Button*, void*);
public:
  Fl_Group *m_configPreferences;
  Fl_Value_Input *Threads;
private:
  void cb_Display_i(Fl_Check_Button*, void*);
  static void cb_Display(Fl_Check_Button*, void*);
  void cb_Display1_i(Fl_Check_Button*, void*);
  static void cb_Display1(Fl_Check_Button*, void*);
  void cb_Display2_i(Fl_Check_Button*, void*);
  static void cb_Display2(Fl_Check_Button*, void*);
  void cb_Display3_i(Fl_Check_Button*, void*);
  static void cb_Display3(Fl_Check_Button*, void*);
  void cb_Center1_i(Fl_Button*, void*);
  static void cb_Center1(Fl_Button*, void*);
  void cb_Zoom_i(Fl_Button*, void*);
  static void cb_Zoom(Fl_Button*, void*);
  void cb_Zoom1_i(Fl_Button*, void*);
  static void cb_Zoom1(Fl_Button*, void*);
  void cb_Up_i(Fl_Button*, void*);
  static void cb_Up(Fl_Button*, void*);
  void cb_Down_i(Fl_Button*, void*);
  static void cb_Down(Fl_Button*, void*);
  void cb_Right_i(Fl_Button*, void*);
  static void cb_Right(Fl_Button*, void*);
  void cb_Left_i(Fl_Button*, void*);
  static void cb_Left(Fl_Button*, void*);
public:
  Fl_Choice *m_ImageMode;
private:
  void cb_m_ImageMode_i(Fl_Choice*, void*);
  static void cb_m_ImageMode(Fl_Choice*, void*);
public:
  Fl_Choice *m_colorMode;
private:
  void cb_m_colorMode_i(Fl_Choice*, void*);
  static void cb_m_colorMode(Fl_Choice*, void*);
  void cb_Transpose_i(Fl_Button*, void*);
  static void cb_Transpose(Fl_Button*, void*);
  void cb_Flip_i(Fl_Button*, void*);
  static void cb_Flip(Fl_Button*, void*);
  void cb_Flip1_i(Fl_Button*, void*);
  static void cb_Flip1(Fl_Button*, void*);
  void cb_Flip2_i(Fl_Button*, void*);
  static void cb_Flip2(Fl_Button*, void*);
  void cb_DTI_i(Fl_Button*, void*);
  static void cb_DTI(Fl_Button*, void*);
  void cb_Info1_i(Fl_Button*, void*);
  static void cb_Info1(Fl_Button*, void*);
  void cb_3e_i(Fl_Button*, void*);
  static void cb_3e(Fl_Button*, void*);
public:
  Fl_Value_Output *m_minintensity_output[4];
  Fl_Value_Output *m_maxintensity_output[4];
private:
  void cb_sliderIW_i(Fl_Slider*, void*);
  static void cb_sliderIW(Fl_Slider*, void*);
  void cb_sliderIW1_i(Fl_Slider*, void*);
  static void cb_sliderIW1(Fl_Slider*, void*);
  void cb_sliderIW2_i(Fl_Slider*, void*);
  static void cb_sliderIW2(Fl_Slider*, void*);
public:
  Fl_Slider *sliderIW[4];
private:
  void cb_sliderIW3_i(Fl_Slider*, void*);
  static void cb_sliderIW3(Fl_Slider*, void*);
  void cb_sliderIL_i(Fl_Slider*, void*);
  static void cb_sliderIL(Fl_Slider*, void*);
  void cb_sliderIL1_i(Fl_Slider*, void*);
  static void cb_sliderIL1(Fl_Slider*, void*);
  void cb_sliderIL2_i(Fl_Slider*, void*);
  static void cb_sliderIL2(Fl_Slider*, void*);
public:
  Fl_Slider *sliderIL[4];
private:
  void cb_sliderIL3_i(Fl_Slider*, void*);
  static void cb_sliderIL3(Fl_Slider*, void*);
public:
  Fl_Value_Output *m_min_color[3];
private:
  void cb_sliderCMin_i(Fl_Slider*, void*);
  static void cb_sliderCMin(Fl_Slider*, void*);
  void cb_sliderCMin1_i(Fl_Slider*, void*);
  static void cb_sliderCMin1(Fl_Slider*, void*);
public:
  Fl_Slider *sliderCMin[3];
private:
  void cb_sliderCMin2_i(Fl_Slider*, void*);
  static void cb_sliderCMin2(Fl_Slider*, void*);
public:
  Fl_Value_Output *m_max_color[3];
private:
  void cb_sliderCMax_i(Fl_Slider*, void*);
  static void cb_sliderCMax(Fl_Slider*, void*);
  void cb_sliderCMax1_i(Fl_Slider*, void*);
  static void cb_sliderCMax1(Fl_Slider*, void*);
public:
  Fl_Slider *sliderCMax[3];
private:
  void cb_sliderCMax2_i(Fl_Slider*, void*);
  static void cb_sliderCMax2(Fl_Slider*, void*);
public:
  Fl_Group *m_configPointsManagement;
  Fl_Group *m_ParametersPointsManagement;
  Fl_Value_Output *num_points;
  Fl_Counter *Class_value_old;
private:
  void cb_Class_value_old_i(Fl_Counter*, void*);
  static void cb_Class_value_old(Fl_Counter*, void*);
public:
  Fl_Counter *clickedRadius_old;
private:
  void cb_clickedRadius_old_i(Fl_Counter*, void*);
  static void cb_clickedRadius_old(Fl_Counter*, void*);
  void cb_Delete2_i(Fl_Button*, void*);
  static void cb_Delete2(Fl_Button*, void*);
  void cb_Clear_i(Fl_Button*, void*);
  static void cb_Clear(Fl_Button*, void*);
  void cb_Hide2_i(Fl_Button*, void*);
  static void cb_Hide2(Fl_Button*, void*);
  void cb_Show_i(Fl_Button*, void*);
  static void cb_Show(Fl_Button*, void*);
  void cb_Load1_i(Fl_Button*, void*);
  static void cb_Load1(Fl_Button*, void*);
  void cb_Save_i(Fl_Button*, void*);
  static void cb_Save(Fl_Button*, void*);
  void cb_3f_i(Fl_Button*, void*);
  static void cb_3f(Fl_Button*, void*);
  void cb_40_i(Fl_Button*, void*);
  static void cb_40(Fl_Button*, void*);
  void cb_41_i(Fl_Button*, void*);
  static void cb_41(Fl_Button*, void*);
public:
  Fl_Group *m_configPointsManagement2;
  Fl_Group *m_ParametersPointsManagement2;
  Fl_Counter *m_OverlayOpacity;
private:
  void cb_m_OverlayOpacity_i(Fl_Counter*, void*);
  static void cb_m_OverlayOpacity(Fl_Counter*, void*);
public:
  Fl_Counter *Class_value;
private:
  void cb_Class_value_i(Fl_Counter*, void*);
  static void cb_Class_value(Fl_Counter*, void*);
public:
  Fl_Counter *clickedRadius;
private:
  void cb_clickedRadius_i(Fl_Counter*, void*);
  static void cb_clickedRadius(Fl_Counter*, void*);
  void cb_Clear1_i(Fl_Button*, void*);
  static void cb_Clear1(Fl_Button*, void*);
  void cb_Hide3_i(Fl_Button*, void*);
  static void cb_Hide3(Fl_Button*, void*);
  void cb_Show1_i(Fl_Button*, void*);
  static void cb_Show1(Fl_Button*, void*);
  void cb_Load2_i(Fl_Button*, void*);
  static void cb_Load2(Fl_Button*, void*);
  void cb_Set_i(Fl_Button*, void*);
  static void cb_Set(Fl_Button*, void*);
  void cb_42_i(Fl_Button*, void*);
  static void cb_42(Fl_Button*, void*);
  void cb_43_i(Fl_Button*, void*);
  static void cb_43(Fl_Button*, void*);
  void cb_44_i(Fl_Button*, void*);
  static void cb_44(Fl_Button*, void*);
public:
  Fl_Group *m_configDomodel;
  Fl_Counter *m_modelvalue1;
  Fl_Counter *m_modelvalue2;
  Fl_Value_Slider *m_modeliter;
  Fl_Value_Slider *m_relaxfactor;
  Fl_Value_Slider *m_targetreduction;
private:
  void cb_45_i(Fl_Button*, void*);
  static void cb_45(Fl_Button*, void*);
  void cb_46_i(Fl_Button*, void*);
  static void cb_46(Fl_Button*, void*);
  void cb_47_i(Fl_Button*, void*);
  static void cb_47(Fl_Button*, void*);
public:
  Fl_Group *m_configModelProp;
private:
  void cb_Resize_i(Fl_Button*, void*);
  static void cb_Resize(Fl_Button*, void*);
public:
  Fl_Counter *label_ROI;
private:
  void cb_Save1_i(Fl_Button*, void*);
  static void cb_Save1(Fl_Button*, void*);
  void cb_Order_i(Fl_Button*, void*);
  static void cb_Order(Fl_Button*, void*);
  void cb_Order1_i(Fl_Button*, void*);
  static void cb_Order1(Fl_Button*, void*);
  void cb_Remove_i(Fl_Button*, void*);
  static void cb_Remove(Fl_Button*, void*);
  void cb_Resize1_i(Fl_Button*, void*);
  static void cb_Resize1(Fl_Button*, void*);
  void cb_Sag_i(Fl_Button*, void*);
  static void cb_Sag(Fl_Button*, void*);
  void cb_Sag1_i(Fl_Button*, void*);
  static void cb_Sag1(Fl_Button*, void*);
  void cb_Cor_i(Fl_Button*, void*);
  static void cb_Cor(Fl_Button*, void*);
  void cb_Cor1_i(Fl_Button*, void*);
  static void cb_Cor1(Fl_Button*, void*);
  void cb_Axial1_i(Fl_Button*, void*);
  static void cb_Axial1(Fl_Button*, void*);
  void cb_Axial2_i(Fl_Button*, void*);
  static void cb_Axial2(Fl_Button*, void*);
public:
  Fl_Value_Slider *m_resize_factor;
  Fl_Counter *m_z_cut;
private:
  void cb_48_i(Fl_Button*, void*);
  static void cb_48(Fl_Button*, void*);
  void cb_49_i(Fl_Button*, void*);
  static void cb_49(Fl_Button*, void*);
  void cb_4a_i(Fl_Button*, void*);
  static void cb_4a(Fl_Button*, void*);
  void cb_4b_i(Fl_Button*, void*);
  static void cb_4b(Fl_Button*, void*);
  void cb_4c_i(Fl_Button*, void*);
  static void cb_4c(Fl_Button*, void*);
  void cb_4d_i(Fl_Button*, void*);
  static void cb_4d(Fl_Button*, void*);
  void cb_4e_i(Fl_Button*, void*);
  static void cb_4e(Fl_Button*, void*);
  void cb_4f_i(Fl_Button*, void*);
  static void cb_4f(Fl_Button*, void*);
  void cb_50_i(Fl_Button*, void*);
  static void cb_50(Fl_Button*, void*);
  void cb_51_i(Fl_Button*, void*);
  static void cb_51(Fl_Button*, void*);
  void cb_52_i(Fl_Button*, void*);
  static void cb_52(Fl_Button*, void*);
  void cb_53_i(Fl_Button*, void*);
  static void cb_53(Fl_Button*, void*);
  void cb_54_i(Fl_Button*, void*);
  static void cb_54(Fl_Button*, void*);
  void cb_55_i(Fl_Button*, void*);
  static void cb_55(Fl_Button*, void*);
  void cb_FA_i(Fl_Button*, void*);
  static void cb_FA(Fl_Button*, void*);
  void cb_Size_i(Fl_Button*, void*);
  static void cb_Size(Fl_Button*, void*);
  void cb_MD_i(Fl_Button*, void*);
  static void cb_MD(Fl_Button*, void*);
  void cb_E1_i(Fl_Button*, void*);
  static void cb_E1(Fl_Button*, void*);
public:
  Fl_Value_Slider *min_scalar_range;
  Fl_Value_Slider *max_scalar_range;
private:
  void cb_set_i(Fl_Button*, void*);
  static void cb_set(Fl_Button*, void*);
public:
  Fl_Value_Slider *m_opacity;
private:
  void cb_m_opacity_i(Fl_Value_Slider*, void*);
  static void cb_m_opacity(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *m_diffuse;
private:
  void cb_m_diffuse_i(Fl_Value_Slider*, void*);
  static void cb_m_diffuse(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *m_specular;
private:
  void cb_m_specular_i(Fl_Value_Slider*, void*);
  static void cb_m_specular(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *m_ambient;
private:
  void cb_m_ambient_i(Fl_Value_Slider*, void*);
  static void cb_m_ambient(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *m_specular_power;
private:
  void cb_m_specular_power_i(Fl_Value_Slider*, void*);
  static void cb_m_specular_power(Fl_Value_Slider*, void*);
  void cb_56_i(Fl_Button*, void*);
  static void cb_56(Fl_Button*, void*);
  void cb_57_i(Fl_Button*, void*);
  static void cb_57(Fl_Button*, void*);
public:
  Fl_Group *m_configDemons;
  Fl_Value_Input *reg_nlevels;
  Fl_Value_Input *reg_steps;
  Fl_Value_Input *reg_sigmastats;
  Fl_Value_Input *reg_sigmagradient;
  Fl_Round_Button *reg_elasticreg;
  Fl_Round_Button *reg_fluidreg;
  Fl_Value_Input *reg_sigmafluid;
  Fl_Value_Input *reg_sigmaelastic;
private:
  void cb_58_i(Fl_Button*, void*);
  static void cb_58(Fl_Button*, void*);
  void cb_59_i(Fl_Button*, void*);
  static void cb_59(Fl_Button*, void*);
  void cb_5a_i(Fl_Button*, void*);
  static void cb_5a(Fl_Button*, void*);
public:
  TensorConsoleType *MyTensorConsole;
  SegmentationConsoleType *MySegmentationConsole;
  FilteringConsoleType *MyFilteringConsole;
  BasicOpConsoleType *MyBasicOpConsole;
  Fl_Group *m_configIO;
  Fl_Choice *m_destino;
  Fl_Choice *m_op1;
  Fl_Choice *m_op2;
  Fl_Double_Window *panelImageInput;
private:
  void cb_Image_i(Fl_Round_Button*, void*);
  static void cb_Image(Fl_Round_Button*, void*);
  void cb_Image1_i(Fl_Round_Button*, void*);
  static void cb_Image1(Fl_Round_Button*, void*);
  void cb_Image2_i(Fl_Round_Button*, void*);
  static void cb_Image2(Fl_Round_Button*, void*);
  void cb_Image3_i(Fl_Round_Button*, void*);
  static void cb_Image3(Fl_Round_Button*, void*);
public:
  Fl_Input *m_InFilePageBrowser;
private:
  void cb_m_InFilePageBrowser_i(Fl_Input*, void*);
  static void cb_m_InFilePageBrowser(Fl_Input*, void*);
public:
  Fl_Choice *m_InFilePageFormat;
private:
  void cb_m_InFilePageFormat_i(Fl_Choice*, void*);
  static void cb_m_InFilePageFormat(Fl_Choice*, void*);
  static Fl_Menu_Item menu_m_InFilePageFormat[];
  void cb_Ok_i(Fl_Button*, void*);
  static void cb_Ok(Fl_Button*, void*);
  void cb_Cancel_i(Fl_Button*, void*);
  static void cb_Cancel(Fl_Button*, void*);
  void cb_Explore_i(Fl_Button*, void*);
  static void cb_Explore(Fl_Button*, void*);
public:
  Fl_Value_Input *m_PixelComponents;
  Fl_Double_Window *panelTensorInput;
  Fl_Input *m_InFilePageTensorBrowser;
private:
  void cb_m_InFilePageTensorBrowser_i(Fl_Input*, void*);
  static void cb_m_InFilePageTensorBrowser(Fl_Input*, void*);
public:
  Fl_Choice *m_InFilePageTensorFormat;
private:
  void cb_m_InFilePageTensorFormat_i(Fl_Choice*, void*);
  static void cb_m_InFilePageTensorFormat(Fl_Choice*, void*);
  static Fl_Menu_Item menu_m_InFilePageTensorFormat[];
  void cb_Ok1_i(Fl_Button*, void*);
  static void cb_Ok1(Fl_Button*, void*);
  void cb_Cancel1_i(Fl_Button*, void*);
  static void cb_Cancel1(Fl_Button*, void*);
  void cb_Explore1_i(Fl_Button*, void*);
  static void cb_Explore1(Fl_Button*, void*);
public:
  Fl_Double_Window *panelDWIInput;
  Fl_Input *m_InFilePageDWIBrowser;
private:
  void cb_m_InFilePageDWIBrowser_i(Fl_Input*, void*);
  static void cb_m_InFilePageDWIBrowser(Fl_Input*, void*);
public:
  Fl_Choice *m_InFilePageDWIFormat;
private:
  void cb_m_InFilePageDWIFormat_i(Fl_Choice*, void*);
  static void cb_m_InFilePageDWIFormat(Fl_Choice*, void*);
  static Fl_Menu_Item menu_m_InFilePageDWIFormat[];
  void cb_Open_i(Fl_Button*, void*);
  static void cb_Open(Fl_Button*, void*);
  void cb_Cancel2_i(Fl_Button*, void*);
  static void cb_Cancel2(Fl_Button*, void*);
  void cb_Explore2_i(Fl_Button*, void*);
  static void cb_Explore2(Fl_Button*, void*);
  void cb_Open1_i(Fl_Button*, void*);
  static void cb_Open1(Fl_Button*, void*);
public:
  Fl_Double_Window *panelDim;
  Fl_Value_Input *m_NumberOfPixelsInX;
  Fl_Value_Input *m_NumberOfPixelsInY;
  Fl_Value_Input *m_NumberOfPixelsInZ;
  Fl_Choice *m_InPixelType;
private:
  void cb_m_InPixelType_i(Fl_Choice*, void*);
  static void cb_m_InPixelType(Fl_Choice*, void*);
  static Fl_Menu_Item menu_m_InPixelType[];
public:
  Fl_Choice *m_InByteOrder;
private:
  void cb_m_InByteOrder_i(Fl_Choice*, void*);
  static void cb_m_InByteOrder(Fl_Choice*, void*);
  static Fl_Menu_Item menu_m_InByteOrder[];
  void cb_Ok2_i(Fl_Button*, void*);
  static void cb_Ok2(Fl_Button*, void*);
  void cb_Cancel3_i(Fl_Button*, void*);
  static void cb_Cancel3(Fl_Button*, void*);
public:
  Fl_Double_Window *panelImageInfo;
  Fl_Value_Output *DimensionX;
private:
  void cb_DimensionX_i(Fl_Value_Output*, void*);
  static void cb_DimensionX(Fl_Value_Output*, void*);
public:
  Fl_Value_Output *DimensionY;
private:
  void cb_DimensionY_i(Fl_Value_Output*, void*);
  static void cb_DimensionY(Fl_Value_Output*, void*);
public:
  Fl_Value_Output *DimensionZ;
private:
  void cb_DimensionZ_i(Fl_Value_Output*, void*);
  static void cb_DimensionZ(Fl_Value_Output*, void*);
public:
  Fl_Value_Output *m_SpacingX;
  Fl_Value_Output *m_SpacingY;
  Fl_Value_Output *m_SpacingZ;
  Fl_Value_Output *m_OutImageInfoOrigin[3];
  Fl_Value_Output *m_OutImageInfoRange[2];
  Fl_Value_Output *m_OutImageInfoCursorIndex[3];
  Fl_Value_Output *m_OutImageInfoCursorPosition[3];
private:
  void cb_Close_i(Fl_Button*, void*);
  static void cb_Close(Fl_Button*, void*);
public:
  Fl_Double_Window *panelMessage;
private:
  void cb_Close1_i(Fl_Button*, void*);
  static void cb_Close1(Fl_Button*, void*);
public:
  Fl_Text_Display *m_OrientationText;
  Fl_Text_Display *m_OriginText;
  Fl_Text_Display *m_MaxMinText;
  Fl_Double_Window *panelRenameVolumes;
  Fl_Group *SelectNewName;
  Fl_Input *NewNameEdit;
private:
  void cb_NewNameEdit_i(Fl_Input*, void*);
  static void cb_NewNameEdit(Fl_Input*, void*);
  void cb_Ok3_i(Fl_Button*, void*);
  static void cb_Ok3(Fl_Button*, void*);
  void cb_Cancel4_i(Fl_Button*, void*);
  static void cb_Cancel4(Fl_Button*, void*);
public:
  Fl_Output *RenameWhich;
  Fl_Value_Input *RenamePosition;
  Fl_Double_Window *panelAbout;
  Fl_Text_Display *m_about_textdisplay;
private:
  void cb_Close2_i(Fl_Button*, void*);
  static void cb_Close2(Fl_Button*, void*);
public:
  Fl_Double_Window *panelMeasures;
  Fl_Text_Display *Mdisplay[19];
  Fl_Text_Display *m_fibersText;
private:
  void cb_5b_i(Fl_Button*, void*);
  static void cb_5b(Fl_Button*, void*);
public:
  Fl_Double_Window *panelROIsMeasures;
private:
  void cb_5c_i(Fl_Button*, void*);
  static void cb_5c(Fl_Button*, void*);
public:
  Fl_Text_Display *m_ROIsText;
  virtual ~UsimagToolGUI();
  virtual void Show(void);
  virtual void OnTipoProcesadoChange();
  virtual void Quit(void);
  void Load(void);
  virtual void LoadTensor(void);
  virtual void LoadDicomDWI(void);
  void LoadME(void);
  virtual void LoadRaw();
  virtual void LoadRaw(const char* filename);
  void LoadMeta(void);
  void ShowImageSrc(int);
  void Distribuir(InputImageType::Pointer, int, const char*);
  virtual void OnFileInputChange(int);
  virtual void OnFileFormatChange(int);
  virtual void OnPixelTypeChange();
  virtual void OnByteOrderChange();
  virtual void OnTipoFiltradoChange();
  virtual void OnTipoFiltroWienerChange();
  virtual void Abrir(int);
  virtual void AbrirTensor(int);
  virtual void OnImageModeChange();
  virtual void GradientFilter(void);
  virtual void RelabelFilter(void);
  virtual void RescaleFilter(void);
  virtual void ErodeFilter(void);
  virtual void DilateFilter(void);
  virtual void RelabelCompFilter(void);
  virtual void AddFilter(void);
  virtual void MultiplyFilter(void);
  virtual void RegisterMLDFilter(void);
  Fl_Group *ActiveGroup;
  Fl_Group *ActiveOptionGroup;
  virtual void GenericFilter();
  virtual void MEFileInputChange();
  virtual void InvertFilter(void);
  virtual void InfoImagen();
  virtual void ViewData(int,int);
  virtual void OnSliceChange(unsigned int,unsigned int);
  virtual void OnOrientationChange(unsigned int);
  virtual void OnCheckButtonChange(bool, int);
  virtual void OnAmplify(Fl_Group*,int);
  virtual void OnMinimize(int, int, int);
  virtual void LoadModel(void);
  virtual void ViewMode3D(void);
  virtual void ViewMode4x2D(void);
  virtual void ViewMode3_1(void);
  virtual void DoModel(int,int,int,InputImageType::Pointer);
  virtual void UpdateIntensityW(int,float);
  virtual void UpdateIntensityL(int,float);
  virtual void LoadFibers();
  virtual void WriteFibers(vtkPolyData*);
  virtual void ViewSliceIn3DWindow(InputImageType::Pointer,int);
  virtual void Save();
  virtual void ShowImageColor(int);
  virtual void DeleteScalar(int);
  virtual void DeleteModel(int);
  virtual void SaveTensor();
  virtual void SaveTensorVTK();
  virtual void LoadDWI(void);
  virtual void SaveModel();
  virtual void LoadGenericDWI(void);
  virtual void LoadGenericDWIandProcess(void);
  virtual void DeleteTensor(int);
  virtual void ZoomIn(void);
  virtual void ZoomOut(void);
  virtual void RenameScalar(int,const char*);
  virtual void RenameTensor(int,const char*);
  virtual void RenameModel(int,const char*);
  virtual void SetOverlay(int);
  virtual void ClearOverlay();
  virtual void SaveOverlay();
  virtual void LoadOverlay(int);
  virtual void SaveDWI();
  virtual void ChangeViewerColorMode();
};
#endif
