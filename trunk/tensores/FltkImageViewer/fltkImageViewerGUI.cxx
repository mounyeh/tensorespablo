// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "fltkImageViewerGUI.h"

void fltkImageViewerGUI::cb_orientationChoice_i(Fl_Choice*, void*) {
  SetOrientation();
}
void fltkImageViewerGUI::cb_orientationChoice(Fl_Choice* o, void* v) {
  ((fltkImageViewerGUI*)(o->parent()->parent()->user_data()))->cb_orientationChoice_i(o,v);
}

Fl_Menu_Item fltkImageViewerGUI::menu_orientationChoice[] = {
 {"X", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Y", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Z", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void fltkImageViewerGUI::cb_Value_i(Fl_Menu_*, void*) {
  ImageMode(itk::IMG_VAL);
}
void fltkImageViewerGUI::cb_Value(Fl_Menu_* o, void* v) {
  ((fltkImageViewerGUI*)(o->parent()->user_data()))->cb_Value_i(o,v);
}

void fltkImageViewerGUI::cb_Log_i(Fl_Menu_*, void*) {
  ImageMode(itk::IMG_LOG);
}
void fltkImageViewerGUI::cb_Log(Fl_Menu_* o, void* v) {
  ((fltkImageViewerGUI*)(o->parent()->user_data()))->cb_Log_i(o,v);
}

void fltkImageViewerGUI::cb_Opacity_i(Fl_Menu_*, void*) {
  ShowOverlayOpacityControl();
}
void fltkImageViewerGUI::cb_Opacity(Fl_Menu_* o, void* v) {
  ((fltkImageViewerGUI*)(o->parent()->user_data()))->cb_Opacity_i(o,v);
}

Fl_Menu_Item fltkImageViewerGUI::menu_[] = {
 {"Filter", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Value", 0,  (Fl_Callback*)fltkImageViewerGUI::cb_Value, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Log", 0,  (Fl_Callback*)fltkImageViewerGUI::cb_Log, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Overlay", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Opacity", 0,  (Fl_Callback*)fltkImageViewerGUI::cb_Opacity, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

void fltkImageViewerGUI::cb_sliceNumberSlider_i(Fl_Value_Slider* o, void*) {
  SelectSlice((unsigned int)o->value());
}
void fltkImageViewerGUI::cb_sliceNumberSlider(Fl_Value_Slider* o, void* v) {
  ((fltkImageViewerGUI*)(o->parent()->user_data()))->cb_sliceNumberSlider_i(o,v);
}

void fltkImageViewerGUI::cb_intensityWindowingMinSlider_i(Fl_Value_Slider* o, void*) {
  SetIntensityWindowingMin(o->value());
}
void fltkImageViewerGUI::cb_intensityWindowingMinSlider(Fl_Value_Slider* o, void* v) {
  ((fltkImageViewerGUI*)(o->parent()->user_data()))->cb_intensityWindowingMinSlider_i(o,v);
}

void fltkImageViewerGUI::cb_intensityWindowingMaxSlider_i(Fl_Value_Slider* o, void*) {
  SetIntensityWindowingMax(o->value());
}
void fltkImageViewerGUI::cb_intensityWindowingMaxSlider(Fl_Value_Slider* o, void* v) {
  ((fltkImageViewerGUI*)(o->parent()->user_data()))->cb_intensityWindowingMaxSlider_i(o,v);
}

void fltkImageViewerGUI::cb_Zoom_i(Fl_Button*, void*) {
  ZoomIn();
}
void fltkImageViewerGUI::cb_Zoom(Fl_Button* o, void* v) {
  ((fltkImageViewerGUI*)(o->parent()->user_data()))->cb_Zoom_i(o,v);
}

void fltkImageViewerGUI::cb_Zoom1_i(Fl_Button*, void*) {
  ZoomOut();
}
void fltkImageViewerGUI::cb_Zoom1(Fl_Button* o, void* v) {
  ((fltkImageViewerGUI*)(o->parent()->user_data()))->cb_Zoom1_i(o,v);
}

void fltkImageViewerGUI::cb_U_i(Fl_Button*, void*) {
  ShiftUp();
}
void fltkImageViewerGUI::cb_U(Fl_Button* o, void* v) {
  ((fltkImageViewerGUI*)(o->parent()->user_data()))->cb_U_i(o,v);
}

void fltkImageViewerGUI::cb_Reset_i(Fl_Button*, void*) {
  CenterWindow();
}
void fltkImageViewerGUI::cb_Reset(Fl_Button* o, void* v) {
  ((fltkImageViewerGUI*)(o->parent()->user_data()))->cb_Reset_i(o,v);
}

void fltkImageViewerGUI::cb_R_i(Fl_Button*, void*) {
  ShiftRight();
}
void fltkImageViewerGUI::cb_R(Fl_Button* o, void* v) {
  ((fltkImageViewerGUI*)(o->parent()->user_data()))->cb_R_i(o,v);
}

void fltkImageViewerGUI::cb_L_i(Fl_Button*, void*) {
  ShiftLeft();
}
void fltkImageViewerGUI::cb_L(Fl_Button* o, void* v) {
  ((fltkImageViewerGUI*)(o->parent()->user_data()))->cb_L_i(o,v);
}

void fltkImageViewerGUI::cb_D_i(Fl_Button*, void*) {
  ShiftDown();
}
void fltkImageViewerGUI::cb_D(Fl_Button* o, void* v) {
  ((fltkImageViewerGUI*)(o->parent()->user_data()))->cb_D_i(o,v);
}

void fltkImageViewerGUI::cb_Points_i(Fl_Button*, void*) {
  ShowClickedPointsWindow();
}
void fltkImageViewerGUI::cb_Points(Fl_Button* o, void* v) {
  ((fltkImageViewerGUI*)(o->parent()->user_data()))->cb_Points_i(o,v);
}

void fltkImageViewerGUI::cb_Update_i(Fl_Button*, void*) {
  UpdateClickedPoints();
}
void fltkImageViewerGUI::cb_Update(Fl_Button* o, void* v) {
  ((fltkImageViewerGUI*)(o->parent()->user_data()))->cb_Update_i(o,v);
}

void fltkImageViewerGUI::cb_Clear_i(Fl_Button*, void*) {
  ClearClickedPoints();
}
void fltkImageViewerGUI::cb_Clear(Fl_Button* o, void* v) {
  ((fltkImageViewerGUI*)(o->parent()->user_data()))->cb_Clear_i(o,v);
}

void fltkImageViewerGUI::cb_Close_i(Fl_Button*, void*) {
  clickedPointsWindow->hide();
}
void fltkImageViewerGUI::cb_Close(Fl_Button* o, void* v) {
  ((fltkImageViewerGUI*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

void fltkImageViewerGUI::cb_Close1_i(Fl_Button*, void*) {
  overlayOpacityControlWindow->hide();
}
void fltkImageViewerGUI::cb_Close1(Fl_Button* o, void* v) {
  ((fltkImageViewerGUI*)(o->parent()->user_data()))->cb_Close1_i(o,v);
}

void fltkImageViewerGUI::cb_overlayOpacitySlider_i(Fl_Value_Slider* o, void*) {
  SetOverlayOpacity( o->value() );
}
void fltkImageViewerGUI::cb_overlayOpacitySlider(Fl_Value_Slider* o, void* v) {
  ((fltkImageViewerGUI*)(o->parent()->user_data()))->cb_overlayOpacitySlider_i(o,v);
}

fltkImageViewerGUI::fltkImageViewerGUI() {
}

fltkImageViewerGUI::~fltkImageViewerGUI() {
}

Fl_Double_Window* fltkImageViewerGUI::CreateGUI() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = iviewWindow = new Fl_Double_Window(295, 400);
    w = o;
    o->labelsize(10);
    o->user_data((void*)(this));
    { Fl_Group* o = glWindowGroup = new Fl_Group(0, 25, 260, 320);
      { Fl_Choice* o = orientationChoice = new Fl_Choice(20, 325, 50, 20);
        o->down_box(FL_BORDER_BOX);
        o->callback((Fl_Callback*)cb_orientationChoice);
        o->menu(menu_orientationChoice);
      }
      { Fl_Gl_Window* o = new Fl_Gl_Window(0, 25, 260, 250, "3D Win");
        o->box(FL_EMBOSSED_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
        CreateGLSliceView( glWindowGroup, o );
      }
      o->end();
    }
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 260, 25);
      { Fl_Menu_Item* o = &menu_[0];
        AddFilterMenuOptions();
      }
      { Fl_Menu_Item* o = &menu_[4];
        AddFilterMenuOptions();
      }
      o->menu(menu_);
      AddMenuBarOptions();
    }
    { Fl_Value_Slider* o = sliceNumberSlider = new Fl_Value_Slider(270, 25, 20, 250, "Slice");
      o->type(4);
      o->labelsize(10);
      o->step(1);
      o->textsize(9);
      o->callback((Fl_Callback*)cb_sliceNumberSlider);
      o->align(FL_ALIGN_TOP);
    }
    { Fl_Value_Slider* o = intensityWindowingMinSlider = new Fl_Value_Slider(0, 360, 300, 20);
      o->type(3);
      o->selection_color(FL_GRAY0);
      o->labeltype(FL_NO_LABEL);
      o->labelsize(9);
      o->step(1);
      o->value(1);
      o->textsize(9);
      o->callback((Fl_Callback*)cb_intensityWindowingMinSlider);
    }
    { Fl_Value_Slider* o = intensityWindowingMaxSlider = new Fl_Value_Slider(0, 380, 300, 20);
      o->type(3);
      o->color((Fl_Color)55);
      o->selection_color(FL_DARK1);
      o->labeltype(FL_NO_LABEL);
      o->labelsize(9);
      o->step(1);
      o->value(1);
      o->textsize(9);
      o->callback((Fl_Callback*)cb_intensityWindowingMaxSlider);
    }
    { Fl_Button* o = new Fl_Button(170, 280, 55, 20, "Zoom In");
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_Zoom);
    }
    { Fl_Button* o = new Fl_Button(170, 335, 55, 20, "Zoom Out");
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_Zoom1);
    }
    { Fl_Button* o = new Fl_Button(110, 280, 35, 35, "U");
      o->box(FL_DIAMOND_UP_BOX);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_U);
    }
    { Fl_Button* o = new Fl_Button(180, 305, 35, 25, "Reset");
      o->box(FL_ROUND_UP_BOX);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_Reset);
    }
    { Fl_Button* o = new Fl_Button(130, 300, 35, 35, "R");
      o->box(FL_DIAMOND_UP_BOX);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_R);
    }
    { Fl_Button* o = new Fl_Button(90, 300, 35, 35, "L");
      o->box(FL_DIAMOND_UP_BOX);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_L);
    }
    { Fl_Button* o = new Fl_Button(110, 320, 35, 35, "D");
      o->box(FL_DIAMOND_UP_BOX);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_D);
    }
    { Fl_Button* o = new Fl_Button(15, 290, 55, 20, "Points");
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_Points);
    }
    o->end();
    o->resizable(o);
  }
  { Fl_Double_Window* o = clickedPointsWindow = new Fl_Double_Window(290, 405, "Clicked Points");
    w = o;
    o->user_data((void*)(this));
    { Fl_Browser* o = clickedPointsBrowser = new Fl_Browser(10, 15, 270, 345);
      o->textfont(4);
    }
    { Fl_Button* o = new Fl_Button(27, 370, 65, 25, "Update");
      o->callback((Fl_Callback*)cb_Update);
    }
    { Fl_Button* o = new Fl_Button(115, 370, 65, 25, "Clear");
      o->callback((Fl_Callback*)cb_Clear);
    }
    { Fl_Button* o = new Fl_Button(200, 370, 65, 25, "Close");
      o->callback((Fl_Callback*)cb_Close);
    }
    o->end();
  }
  { Fl_Double_Window* o = overlayOpacityControlWindow = new Fl_Double_Window(400, 100, "Overlay Opacity");
    w = o;
    o->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(145, 64, 115, 25, "Close");
      o->callback((Fl_Callback*)cb_Close1);
    }
    { Fl_Value_Slider* o = overlayOpacitySlider = new Fl_Value_Slider(25, 29, 360, 25, "Opacity");
      o->type(3);
      o->color((Fl_Color)29);
      o->selection_color((Fl_Color)21);
      o->step(0.01);
      o->value(0.5);
      o->callback((Fl_Callback*)cb_overlayOpacitySlider);
      o->align(FL_ALIGN_TOP);
    }
    o->end();
  }
  return w;
}

void fltkImageViewerGUI::CreateGLSliceView( Fl_Group *,Fl_Gl_Window * w ) {
}

void fltkImageViewerGUI::AddMenuBarOptions(void) {
}

void fltkImageViewerGUI::AddFilterMenuOptions() {
}

void fltkImageViewerGUI::AddFileMenuOptions() {
}

void fltkImageViewerGUI::SetImage( itk::ImageBase<3> * img ) {
}

void fltkImageViewerGUI::Show(void) {
}

void fltkImageViewerGUI::Hide(void) {
}

void fltkImageViewerGUI::Update(void) {
}

void fltkImageViewerGUI::Synchronize(void) {
}

void fltkImageViewerGUI::ImageMode(itk::ImageModeType mode) {
}

void fltkImageViewerGUI::SelectSlice(unsigned int) {
}

void fltkImageViewerGUI::SetIntensityWindowingMin(float) {
}

void fltkImageViewerGUI::SetIntensityWindowingMax(float) {
}

void fltkImageViewerGUI::CenterWindow(void) {
}

void fltkImageViewerGUI::ZoomIn(void) {
}

void fltkImageViewerGUI::ZoomOut(void) {
}

void fltkImageViewerGUI::ShiftUp(void) {
}

void fltkImageViewerGUI::ShiftDown(void) {
}

void fltkImageViewerGUI::ShiftLeft(void) {
}

void fltkImageViewerGUI::ShiftRight(void) {
}

void fltkImageViewerGUI::SetOrientation(void) {
}

void fltkImageViewerGUI::ShowClickedPointsWindow(void) {
}

void fltkImageViewerGUI::ClearClickedPoints(void) {
}

void fltkImageViewerGUI::ShowOverlayOpacityControl(void) {
}

void fltkImageViewerGUI::SetOverlayOpacity(float) {
}

void fltkImageViewerGUI::UpdateClickedPoints() {
}
