// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "fltkClippingPlane3DDrawerGUI.h"

void fltkClippingPlane3DDrawerGUI::cb_enableCheckButton_i(Fl_Check_Button*, void*) {
  UpdateFromGUI();
}
void fltkClippingPlane3DDrawerGUI::cb_enableCheckButton(Fl_Check_Button* o, void* v) {
  ((fltkClippingPlane3DDrawerGUI*)(o->parent()->user_data()))->cb_enableCheckButton_i(o,v);
}

void fltkClippingPlane3DDrawerGUI::cb_xValueInput_i(Fl_Value_Input*, void*) {
  UpdateFromGUI();
}
void fltkClippingPlane3DDrawerGUI::cb_xValueInput(Fl_Value_Input* o, void* v) {
  ((fltkClippingPlane3DDrawerGUI*)(o->parent()->user_data()))->cb_xValueInput_i(o,v);
}

void fltkClippingPlane3DDrawerGUI::cb_yValueInput_i(Fl_Value_Input*, void*) {
  UpdateFromGUI();
}
void fltkClippingPlane3DDrawerGUI::cb_yValueInput(Fl_Value_Input* o, void* v) {
  ((fltkClippingPlane3DDrawerGUI*)(o->parent()->user_data()))->cb_yValueInput_i(o,v);
}

void fltkClippingPlane3DDrawerGUI::cb_zValueInput_i(Fl_Value_Input*, void*) {
  UpdateFromGUI();
}
void fltkClippingPlane3DDrawerGUI::cb_zValueInput(Fl_Value_Input* o, void* v) {
  ((fltkClippingPlane3DDrawerGUI*)(o->parent()->user_data()))->cb_zValueInput_i(o,v);
}

void fltkClippingPlane3DDrawerGUI::cb_rAdjuster_i(Fl_Adjuster* o, void*) {
  rValueOutput->value( o->value() );
UpdateFromGUI();
}
void fltkClippingPlane3DDrawerGUI::cb_rAdjuster(Fl_Adjuster* o, void* v) {
  ((fltkClippingPlane3DDrawerGUI*)(o->parent()->user_data()))->cb_rAdjuster_i(o,v);
}

fltkClippingPlane3DDrawerGUI::fltkClippingPlane3DDrawerGUI() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = clippingWindow = new Fl_Double_Window(272, 100, "Clipping Plane");
    w = o;
    o->user_data((void*)(this));
    { Fl_Check_Button* o = enableCheckButton = new Fl_Check_Button(215, 16, 30, 29);
      o->down_box(FL_DIAMOND_DOWN_BOX);
      o->selection_color((Fl_Color)2);
      o->callback((Fl_Callback*)cb_enableCheckButton);
      o->align(FL_ALIGN_CENTER);
    }
    { Fl_Value_Output* o = rValueOutput = new Fl_Value_Output(215, 50, 34, 20);
      o->labelsize(10);
      o->textsize(10);
    }
    { Fl_Value_Input* o = xValueInput = new Fl_Value_Input(45, 20, 35, 20, "x ");
      o->textsize(12);
      o->callback((Fl_Callback*)cb_xValueInput);
    }
    { Fl_Value_Input* o = yValueInput = new Fl_Value_Input(105, 20, 35, 20, "y ");
      o->textsize(12);
      o->callback((Fl_Callback*)cb_yValueInput);
    }
    { Fl_Value_Input* o = zValueInput = new Fl_Value_Input(165, 20, 35, 20, "z ");
      o->textsize(12);
      o->callback((Fl_Callback*)cb_zValueInput);
    }
    { Fl_Adjuster* o = rAdjuster = new Fl_Adjuster(45, 50, 160, 20, "R ");
      o->minimum(-100);
      o->maximum(100);
      o->step(1);
      o->callback((Fl_Callback*)cb_rAdjuster);
      o->align(FL_ALIGN_LEFT);
    }
    o->end();
  }
}

fltkClippingPlane3DDrawerGUI::~fltkClippingPlane3DDrawerGUI() {
}

void fltkClippingPlane3DDrawerGUI::Show(void) {
  clippingWindow->show();
}

void fltkClippingPlane3DDrawerGUI::Hide(void) {
  clippingWindow->hide();
}

void fltkClippingPlane3DDrawerGUI::UpdateFromGUI(void) {
}

void fltkClippingPlane3DDrawerGUI::SetLabel( const char * label ) {
  clippingWindow->label( label );
}
