/*=========================================================================

  Program:   Visualization Toolkit
  Module:    $RCSfile: vtkTensorGlyph2D.cxx,v $

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
#include "vtkTensorGlyph2D.h"

#include "vtkCell.h"
#include "vtkCellArray.h"
#include "vtkDataSet.h"
#include "vtkExecutive.h"
#include "vtkFloatArray.h"
#include "vtkMath.h"
#include "vtkInformation.h"
#include "vtkInformationVector.h"
#include "vtkObjectFactory.h"
#include "vtkPointData.h"
#include "vtkPolyData.h"
#include "vtkTransform.h"
#include "vtkSphereSource.h"
#include "vtkCubeSource.h"
#include "vtkSuperquadricSource.h"
#include "vtkGlyphSource2D.h"

#include <algorithm>

//vtkCxxRevisionMacro(vtkTensorGlyph2D, "$Revision: 1.57.12.1 $");
//vtkStandardNewMacro(vtkTensorGlyph2D);

// Construct object with scaling on and scale factor 1.0. Eigenvalues are 
// extracted, glyphs are colored with input scalar data, and logarithmic
// scaling is turned off.
vtkTensorGlyph2D::vtkTensorGlyph2D()
{
  this->inputPoints = NULL;

  this->Scaling = 1;
  this->ScaleFactor = 1.0;
  this->ColorMode = INV;

//  glyphsource->Delete();
}

vtkTensorGlyph2D::~vtkTensorGlyph2D()
{
}

vtkPolyData *vtkTensorGlyph2D::GetOutput()
{

  vtkPolyData *source;
  vtkPolyData *output = vtkPolyData::New();

  vtkIdType numPts, numSourcePts, numSourceCells, inPtId;
  vtkPoints *sourcePts;
  vtkDataArray *sourceNormals;
  vtkCellArray *sourceCells, *cells;  
  vtkPoints *newPts;
  vtkFloatArray *newScalars=NULL;
  vtkFloatArray *newNormals=NULL;
  double x[3];
  vtkTransform *trans;
  vtkCell *cell;
  vtkIdList *cellPts;
  int npts;
  vtkIdType *pts;
  vtkIdType ptIncr, cellId;
  vtkMatrix4x4 *matrix;
  double maxScale;
  vtkPointData *pd, *outPD;

  StrainImageType::IndexType pixelIndex;
  StrainPixelType pixel;
  EigenValuesArrayType eigval;
  EigenVectorsMatrixType eigvec;
  double factor;
  float scalarValue;
  int i,j,k;
  int xSize, ySize;
  int cont=0;
  double angulo;

  double tensor1[3],tensor2[3],tensor3[3],tensor4[3];

  RealType t1,t2;

  StrainImageType::PointType origin = this->input->GetOrigin();
  StrainImageType::SpacingType spacing = this->input->GetSpacing();

  vtkGlyphSource2D *glyphsource = vtkGlyphSource2D::New();
  glyphsource->SetGlyphTypeToDiamond();
  glyphsource->SetScale(100);
  glyphsource->FilledOff();
  glyphsource->Update();
  source = glyphsource->GetOutput();
  source->Update();

//  vtkDebugMacro(<<"Generating tensor glyphs");

  pts = new vtkIdType[source->GetMaxCellSize()];
  trans = vtkTransform::New();
  matrix = vtkMatrix4x4::New();

  outPD = output->GetPointData();

  xSize = this->input->GetRequestedRegion().GetSize()[0];
  ySize = this->input->GetRequestedRegion().GetSize()[1];
  numPts = xSize * ySize;

  //
  // Allocate storage for output PolyData
  //

  sourcePts = source->GetPoints();
  numSourcePts = sourcePts->GetNumberOfPoints();
  numSourceCells = source->GetNumberOfCells();
  newPts = vtkPoints::New();

  // only copy scalar data through
  pd = source->GetPointData();

  newScalars = vtkFloatArray::New();

  if ( (sourceNormals = pd->GetNormals()) )
    {
    newNormals = vtkFloatArray::New();
    newNormals->SetNumberOfComponents(3);
    }
  if ( newScalars )
    {
    int idx = outPD->AddArray(newScalars);
    outPD->SetActiveAttribute(idx, vtkDataSetAttributes::SCALARS);
    newScalars->Delete();
    }

  if ( newNormals )
    {
    outPD->SetNormals(newNormals);
    newNormals->Delete();
    }


  //
  // Traverse all Input points, transforming glyph at Source points
  //
  trans->PreMultiply();

  for (inPtId=0; inPtId<numPts; inPtId++)
    {
    ptIncr = inPtId * numSourcePts;

    // Translation is postponed

    pixelIndex[0] = inPtId % xSize;
    pixelIndex[1] = inPtId / xSize;
    pixelIndex[2] = this->PlanoZ;
    pixelIndex[3] = this->Tiempo;
    pixel = input->GetPixel(pixelIndex);

    pixel.ComputeEigenSystem(eigval,eigvec);

    // Now do the real work for each "direction"

    // Remove previous scales ...
    trans->Identity();

    // translate Source to Input point
    x[0] = origin[0] + spacing[0] * pixelIndex[0];
    x[1] = origin[1] + spacing[1] * pixelIndex[1];
    x[2] = origin[2] + spacing[2] * pixelIndex[2];

    trans->Translate(x[0], x[1], x[2]);

    angulo = atan(eigvec[1][0]/eigvec[0][0]) * 180 / 3.1415;
    trans->RotateZ(angulo);

    if (fabs(eigval[0])>fabs(eigval[1])) factor = fabs(1 / eigval[0]);
      else factor = fabs(1 / eigval[1]);

    eigval[0] *= factor;
    eigval[1] *= factor;

    double factor1 = sqrt(2)*(0.25 + 0.25*0.5*(eigval[0]+1) + 0.5*sqrt(eigval[0]*eigval[0]+eigval[1]*eigval[1]));
    double factor2 = sqrt(2)*(0.25 + 0.25*0.5*(eigval[1]+1) + 0.5*sqrt(eigval[0]*eigval[0]+eigval[1]*eigval[1]));

    trans->Scale(this->ScaleFactor*factor1,this->ScaleFactor*factor2,1);

    // multiply points (and normals if available) by resulting
    // matrix
    trans->TransformPoints(sourcePts,newPts);

    // Apply the transformation to a series of points, 
    // and append the results to outPts.
    if ( newNormals )
      {
      trans->TransformNormals(sourceNormals,newNormals);
      }

    if (fabs(eigval[0])>fabs(eigval[1])) scalarValue = eigval[0];
      else scalarValue = eigval[1];

    switch (this->ColorMode)
    {
        case INV: 
          scalarValue = pixel.GetInvariant();
          break;

        case EIG0: 
          scalarValue = eigval[0];
          break;

        case EIG1: 
          scalarValue = eigval[1];
          break;

        case ST0: 
          scalarValue = pixel[0];
          break;

        case ST1: 
          scalarValue = pixel[1];
          break;

        case ST2: 
          scalarValue = pixel[2];
          break;

    }


      // Copy point data from source
    for (i=0; i < numSourcePts; i++) 
      {
        newScalars->InsertNextTupleValue(&scalarValue);
      }
    cont++;
    }
//  vtkDebugMacro(<<"Generated " << numPts <<" tensor glyphs");








  if (this->inputPoints) {
  
  numPts = this->inputPoints->GetNumberOfPoints();
//  if (this->inputPoints)


  for (inPtId=0; inPtId<numPts; inPtId++)
  {
    ptIncr = inPtId * numSourcePts;

    this->inputPoints->GetPoint(inPtId,x);

    pixelIndex[0] = (int) ((x[0]-origin[0]) / spacing[0]);
    pixelIndex[1] = (int) ((x[1]-origin[1]) / spacing[1]);

    t1 = ( (x[0]-origin[0]) / spacing[0] - pixelIndex[0] ) / spacing[0];
    t2 = ( (x[1]-origin[1]) / spacing[1] - pixelIndex[1] ) / spacing[1];

    pixelIndex[0] = inPtId % xSize;
    pixelIndex[1] = inPtId / xSize;
    pixelIndex[2] = this->PlanoZ;
    pixelIndex[3] = this->Tiempo;
    pixel = input->GetPixel(pixelIndex);

    pixel.ComputeEigenSystem(eigval,eigvec);
    tensor1[0]=eigval[0]; tensor1[1]=eigval[1]; tensor1[2]=atan(eigvec[1][0]/eigvec[0][0]);
// OJO!! A VER SI CALCULO BIEN EL ANGULO
//tensor1[2]=atan2(yv[1],xv[1]);

    pixelIndex[0] += 1;
    pixel = input->GetPixel(pixelIndex);
    pixel.ComputeEigenSystem(eigval,eigvec);
    tensor2[0]=eigval[0]; tensor2[1]=eigval[1]; tensor2[2]=atan(eigvec[1][0]/eigvec[0][0]);

    pixelIndex[0] -= 1;
    pixelIndex[1] += 1;
    pixel = input->GetPixel(pixelIndex);
    pixel.ComputeEigenSystem(eigval,eigvec);
    tensor3[0]=eigval[0]; tensor3[1]=eigval[1]; tensor3[2]=atan(eigvec[1][0]/eigvec[0][0]);

    pixelIndex[0] += 1;
    pixel = input->GetPixel(pixelIndex);
    pixel.ComputeEigenSystem(eigval,eigvec);
    tensor4[0]=eigval[0]; tensor4[1]=eigval[1]; tensor4[2]=atan(eigvec[1][0]/eigvec[0][0]);

    eigval[0] = t2 * (t1*tensor1[0] + (1-t1)*tensor2[0]) + (1-t2) * (t1*tensor3[0] + (1-t1)*tensor4[0]);
    eigval[1] = t2 * (t1*tensor1[1] + (1-t1)*tensor2[1]) + (1-t2) * (t1*tensor3[1] + (1-t1)*tensor4[1]);
    angulo = ( t2 * (t1*tensor1[0] + (1-t1)*tensor2[0]) + (1-t2) * (t1*tensor3[0] + (1-t1)*tensor4[0]) ) * 180 / 3.1415;

    if (fabs(eigval[0])>fabs(eigval[2]))
      factor = 1 / eigval[0];

    else factor = 1 / eigval[2];

     // Now do the real work for each "direction"

    // Remove previous scales ...
    trans->Identity();

    // translate Source to Input point
//    input->GetPoint(inPtId, x);
//    v[0]=v0; v[1]=v1;

    x[0] = origin[0] + spacing[0] * pixelIndex[0] - spacing[0]/2;
    x[1] = origin[1] + spacing[1] * pixelIndex[1] - spacing[1]/2;
    x[2] = origin[2] + spacing[2] * pixelIndex[2];

    trans->Translate(x[0], x[1], x[2]);

    // normalized eigenvectors rotate object for eigen direction 0
 
//    angulo = atan2(eigvec[1][1],eigvec[0][1]) * 180 / 3.1415;
    angulo = atan(eigvec[1][0]/eigvec[0][0]) * 180 / 3.1415;
    trans->RotateZ(angulo);

    if (fabs(eigval[0])>fabs(eigval[1])) factor = fabs(1 / eigval[0]);
      else factor = fabs(1 / eigval[1]);

    eigval[0] *= factor;
    eigval[1] *= factor;

    double factor1 = sqrt(2)*(0.25 + 0.25*0.5*(eigval[0]+1) + 0.5*sqrt(eigval[0]*eigval[0]+eigval[1]*eigval[1]));
    double factor2 = sqrt(2)*(0.25 + 0.25*0.5*(eigval[1]+1) + 0.5*sqrt(eigval[0]*eigval[0]+eigval[1]*eigval[1]));

    trans->Scale(this->ScaleFactor*factor1,this->ScaleFactor*factor2,1);

    // multiply points (and normals if available) by resulting
    // matrix
    trans->TransformPoints(sourcePts,newPts);

    // Apply the transformation to a series of points, 
    // and append the results to outPts.
    if ( newNormals )
      {
      trans->TransformNormals(sourceNormals,newNormals);
      }

    if (fabs(eigval[0])>fabs(eigval[1])) scalarValue = eigval[0];
      else scalarValue = eigval[1];

    switch (this->ColorMode)
    {
        case INV: 
          scalarValue = pixel.GetInvariant();
          break;

        case EIG0: 
          scalarValue = eigval[0];
          break;

        case EIG1: 
          scalarValue = eigval[1];
          break;

        case ST0: 
          scalarValue = pixel[0];
          break;

        case ST1: 
          scalarValue = pixel[1];
          break;

        case ST2: 
          scalarValue = pixel[2];
          break;

    }
      // Copy point data from source
    for (i=0; i < numSourcePts; i++) 
      {
        newScalars->InsertNextTupleValue(&scalarValue);
      }
    cont++;
    }
  }
//  vtkDebugMacro(<<"Generated " << numPts <<" tensor glyphs");












  // Setting up for calls to PolyData::InsertNextCell()
  if ( (sourceCells=source->GetVerts())->GetNumberOfCells() > 0 )
    {
    cells = vtkCellArray::New();
    cells->Allocate(cont*sourceCells->GetSize());
    output->SetVerts(cells);
    cells->Delete();
    }
  if ( (sourceCells=source->GetLines())->GetNumberOfCells() > 0 )
    {
    cells = vtkCellArray::New();
    cells->Allocate(cont*sourceCells->GetSize());
    output->SetLines(cells);
    cells->Delete();
    }
  if ( (sourceCells=source->GetPolys())->GetNumberOfCells() > 0 )
    {
    cells = vtkCellArray::New();
    cells->Allocate(cont*sourceCells->GetSize());
    output->SetPolys(cells);
    cells->Delete();
    }
  if ( (sourceCells=source->GetStrips())->GetNumberOfCells() > 0 )
    {
    cells = vtkCellArray::New();
    cells->Allocate(cont*sourceCells->GetSize());
    output->SetStrips(cells);
    cells->Delete();
    }

  //
  // First copy all topology (transformation independent)
  //
  for (inPtId=0; inPtId < cont; inPtId++)
    {
    ptIncr = inPtId * numSourcePts;
    for (cellId=0; cellId < numSourceCells; cellId++)
      {
      cell = source->GetCell(cellId);
      cellPts = cell->GetPointIds();
      npts = cellPts->GetNumberOfIds();
      for (i=0; i < npts; i++)
        {
        pts[i] = cellPts->GetId(i) + ptIncr;
        }
      output->InsertNextCell(cell->GetCellType(),npts,pts);
      }
    }

  //
  // Update output and release memory
  //
  delete [] pts;

  output->SetPoints(newPts);
  newPts->Delete();

  trans->Delete();
  matrix->Delete();
//  source->Delete();

  return output;
}

void vtkTensorGlyph2D::ComputeEigenSystem (vtkIdType index, double *v[2], double w[2]) {

  double tensor[9];

//  input->GetPointData()->GetTensors()->GetTuple(index, tensor);

  if(tensor[1]*tensor[2] <= 0.1e-20 ) {
    w[0] = tensor[0]; v[0][0] = 1; v[1][0] = 0;
    w[1] = tensor[3]; v[0][1] = 0; v[1][1] = 1;
    return;
  }

  // First of all, compute the eigenvalues, together with the rank of the filter:
  double tr = tensor[0] + tensor[3];
  double det = tensor[0] * tensor[3] - tensor[1] * tensor[2];
  double S = sqrt( (tr/2)*(tr/2) - det );
  w[0] = tr/2 + S;
  w[1] = tr/2 - S;
/*
  double SS = sqrt( std::max(((((tensor[0]-tensor[3])/2) + tensor[1] * tensor[2]) * ((tensor[0]-tensor[3])/2) + tensor[1] * tensor[2]), 0.0) );
  if( tensor[0] - tensor[3] < 0 ) {
    v[0][0] = tensor[1];
    v[1][0] = - (tensor[0]-tensor[3])/2 + SS;
    v[0][1] = + (tensor[0]-tensor[3])/2 - SS;
    v[1][1] = tensor[1];
  } else {
    v[0][1] = tensor[1];
    v[1][1] = - (tensor[0]-tensor[3])/2 - SS;
    v[0][0] = + (tensor[0]-tensor[3])/2 + SS;
    v[1][0] = tensor[1];
  }
*/

  if (tensor[1]!=0) {
    v[0][0]=w[0]-tensor[3];
    v[1][0]=tensor[1];
    v[0][1]=w[1]-tensor[3];
    v[1][1]=tensor[1];
  }

  double n1 = sqrt(v[0][0]*v[0][0]+v[1][0]*v[1][0]);
  v[0][0] /= n1; v[1][0] /= n1;

  double n2 = sqrt(v[0][1]*v[0][1]+v[1][1]*v[1][1]);
  v[0][1] /= n2; v[1][1] /= n2;

  return;

}


