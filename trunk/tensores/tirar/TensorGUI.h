// generated by Fast Light User Interface Designer (fluid) version 1.0107

#ifndef TensorGUI_h
#define TensorGUI_h
#include <FL/Fl.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Choice.H>
#include "tensor/itkDTITensor.h"
#include <itkImage.h>
#include "tensor/itkDWImages.h"
#include "Viewer3D.h"
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Counter.H>
#include <FL/Fl_Spinner.H>
#include <FL/Fl_Text_Display.H>
#include "MyfltkImageViewer/MyfltkImageViewer.h"
#include <FL/Fl_Double_Window.H>

class TensorGUI : public Fl_Group {
public:
  TensorGUI(int X, int Y, int W, int H, const char *L = 0);
  Fl_Group *m_configGeodesicPath;
  Fl_Value_Slider *m_color_r;
  Fl_Value_Slider *m_color_g;
  Fl_Value_Slider *m_color_b;
private:
  void cb_colortype_i(Fl_Check_Button*, void*);
  static void cb_colortype(Fl_Check_Button*, void*);
  void cb_colortype1_i(Fl_Check_Button*, void*);
  static void cb_colortype1(Fl_Check_Button*, void*);
  void cb_colortype2_i(Fl_Check_Button*, void*);
  static void cb_colortype2(Fl_Check_Button*, void*);
  void cb_colortype3_i(Fl_Check_Button*, void*);
  static void cb_colortype3(Fl_Check_Button*, void*);
  void cb_colortype4_i(Fl_Check_Button*, void*);
  static void cb_colortype4(Fl_Check_Button*, void*);
  void cb_colortype5_i(Fl_Check_Button*, void*);
  static void cb_colortype5(Fl_Check_Button*, void*);
  void cb_Set_i(Fl_Button*, void*);
  static void cb_Set(Fl_Button*, void*);
  void cb_colortype6_i(Fl_Check_Button*, void*);
  static void cb_colortype6(Fl_Check_Button*, void*);
  void cb_colortype7_i(Fl_Check_Button*, void*);
  static void cb_colortype7(Fl_Check_Button*, void*);
  void cb_colortype8_i(Fl_Check_Button*, void*);
  static void cb_colortype8(Fl_Check_Button*, void*);
  void cb_colortype9_i(Fl_Check_Button*, void*);
  static void cb_colortype9(Fl_Check_Button*, void*);
  void cb_colortypea_i(Fl_Check_Button*, void*);
  static void cb_colortypea(Fl_Check_Button*, void*);
  void cb_colortypeb_i(Fl_Check_Button*, void*);
  static void cb_colortypeb(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *colortype[13];
private:
  void cb_colortypec_i(Fl_Check_Button*, void*);
  static void cb_colortypec(Fl_Check_Button*, void*);
public:
  Fl_Value_Slider *m_int_step;
  Fl_Value_Slider *m_prop_time;
  Fl_Value_Slider *m_radius;
  Fl_Value_Slider *m_step_length;
  Fl_Value_Slider *m_fa_threshold;
  Fl_Value_Slider *m_curvature_threshold;
private:
  void cb_load_i(Fl_Button*, void*);
  static void cb_load(Fl_Button*, void*);
  void cb_show_i(Fl_Button*, void*);
  static void cb_show(Fl_Button*, void*);
  void cb_clear_i(Fl_Button*, void*);
  static void cb_clear(Fl_Button*, void*);
public:
  Fl_Value_Slider *clickedRadius_;
private:
  void cb_clickedRadius__i(Fl_Value_Slider*, void*);
  static void cb_clickedRadius_(Fl_Value_Slider*, void*);
public:
  Fl_Counter *clickedRadius;
private:
  void cb_clickedRadius_i(Fl_Counter*, void*);
  static void cb_clickedRadius(Fl_Counter*, void*);
  void cb_erase_i(Fl_Check_Button*, void*);
  static void cb_erase(Fl_Check_Button*, void*);
public:
  Fl_Counter *class_value;
private:
  void cb_class_value_i(Fl_Counter*, void*);
  static void cb_class_value(Fl_Counter*, void*);
  void cb_opacity_i(Fl_Value_Slider*, void*);
  static void cb_opacity(Fl_Value_Slider*, void*);
public:
  Fl_Button *TrachtographyVTKButton;
private:
  void cb_TrachtographyVTKButton_i(Fl_Button*, void*);
  static void cb_TrachtographyVTKButton(Fl_Button*, void*);
public:
  Fl_Button *RungeKuttaButton;
private:
  void cb_RungeKuttaButton_i(Fl_Button*, void*);
  static void cb_RungeKuttaButton(Fl_Button*, void*);
  void cb_Tractog_i(Fl_Button*, void*);
  static void cb_Tractog(Fl_Button*, void*);
public:
  Fl_Check_Button *m_connect;
  Fl_Button *RungeKuttaButtonAll;
private:
  void cb_RungeKuttaButtonAll_i(Fl_Button*, void*);
  static void cb_RungeKuttaButtonAll(Fl_Button*, void*);
public:
  Fl_Button *SelectFibers;
private:
  void cb_SelectFibers_i(Fl_Button*, void*);
  static void cb_SelectFibers(Fl_Button*, void*);
  void cb_Tractog1_i(Fl_Button*, void*);
  static void cb_Tractog1(Fl_Button*, void*);
public:
  Fl_Spinner *m_roi1;
  Fl_Spinner *m_roi2;
  Fl_Spinner *m_roi3;
  Fl_Check_Button *m_exc_all;
private:
  void cb__i(Fl_Button*, void*);
  static void cb_(Fl_Button*, void*);
  void cb_1_i(Fl_Button*, void*);
  static void cb_1(Fl_Button*, void*);
public:
  Fl_Group *m_configTractographyAuto;
private:
  void cb_chk_i(Fl_Check_Button*, void*);
  static void cb_chk(Fl_Check_Button*, void*);
  void cb_chk1_i(Fl_Check_Button*, void*);
  static void cb_chk1(Fl_Check_Button*, void*);
  void cb_chk2_i(Fl_Check_Button*, void*);
  static void cb_chk2(Fl_Check_Button*, void*);
  void cb_chk3_i(Fl_Check_Button*, void*);
  static void cb_chk3(Fl_Check_Button*, void*);
  void cb_chk4_i(Fl_Check_Button*, void*);
  static void cb_chk4(Fl_Check_Button*, void*);
  void cb_chk5_i(Fl_Check_Button*, void*);
  static void cb_chk5(Fl_Check_Button*, void*);
  void cb_chk6_i(Fl_Check_Button*, void*);
  static void cb_chk6(Fl_Check_Button*, void*);
  void cb_chk7_i(Fl_Check_Button*, void*);
  static void cb_chk7(Fl_Check_Button*, void*);
  void cb_chk8_i(Fl_Check_Button*, void*);
  static void cb_chk8(Fl_Check_Button*, void*);
  void cb_chk9_i(Fl_Check_Button*, void*);
  static void cb_chk9(Fl_Check_Button*, void*);
  void cb_chka_i(Fl_Check_Button*, void*);
  static void cb_chka(Fl_Check_Button*, void*);
  void cb_chkb_i(Fl_Check_Button*, void*);
  static void cb_chkb(Fl_Check_Button*, void*);
  void cb_chkc_i(Fl_Check_Button*, void*);
  static void cb_chkc(Fl_Check_Button*, void*);
  void cb_chkd_i(Fl_Check_Button*, void*);
  static void cb_chkd(Fl_Check_Button*, void*);
  void cb_chke_i(Fl_Check_Button*, void*);
  static void cb_chke(Fl_Check_Button*, void*);
  void cb_chkf_i(Fl_Check_Button*, void*);
  static void cb_chkf(Fl_Check_Button*, void*);
  void cb_chk10_i(Fl_Check_Button*, void*);
  static void cb_chk10(Fl_Check_Button*, void*);
  void cb_chk11_i(Fl_Check_Button*, void*);
  static void cb_chk11(Fl_Check_Button*, void*);
  void cb_chk12_i(Fl_Check_Button*, void*);
  static void cb_chk12(Fl_Check_Button*, void*);
  void cb_chk13_i(Fl_Check_Button*, void*);
  static void cb_chk13(Fl_Check_Button*, void*);
  void cb_chk14_i(Fl_Check_Button*, void*);
  static void cb_chk14(Fl_Check_Button*, void*);
  void cb_chk15_i(Fl_Check_Button*, void*);
  static void cb_chk15(Fl_Check_Button*, void*);
  void cb_chk16_i(Fl_Check_Button*, void*);
  static void cb_chk16(Fl_Check_Button*, void*);
  void cb_chk17_i(Fl_Check_Button*, void*);
  static void cb_chk17(Fl_Check_Button*, void*);
  void cb_chk18_i(Fl_Check_Button*, void*);
  static void cb_chk18(Fl_Check_Button*, void*);
  void cb_chk19_i(Fl_Check_Button*, void*);
  static void cb_chk19(Fl_Check_Button*, void*);
  void cb_chk1a_i(Fl_Check_Button*, void*);
  static void cb_chk1a(Fl_Check_Button*, void*);
  void cb_chk1b_i(Fl_Check_Button*, void*);
  static void cb_chk1b(Fl_Check_Button*, void*);
  void cb_chk1c_i(Fl_Check_Button*, void*);
  static void cb_chk1c(Fl_Check_Button*, void*);
  void cb_chk1d_i(Fl_Check_Button*, void*);
  static void cb_chk1d(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *chk[31];
private:
  void cb_chk1e_i(Fl_Check_Button*, void*);
  static void cb_chk1e(Fl_Check_Button*, void*);
  void cb_Do_i(Fl_Button*, void*);
  static void cb_Do(Fl_Button*, void*);
  void cb_Normalize_i(Fl_Button*, void*);
  static void cb_Normalize(Fl_Button*, void*);
  void cb_Load_i(Fl_Button*, void*);
  static void cb_Load(Fl_Button*, void*);
  void cb_Do1_i(Fl_Button*, void*);
  static void cb_Do1(Fl_Button*, void*);
  void cb_Auto_i(Fl_Button*, void*);
  static void cb_Auto(Fl_Button*, void*);
  void cb_Select_i(Fl_Button*, void*);
  static void cb_Select(Fl_Button*, void*);
  void cb_Select1_i(Fl_Button*, void*);
  static void cb_Select1(Fl_Button*, void*);
  void cb_Main_i(Fl_Button*, void*);
  static void cb_Main(Fl_Button*, void*);
  void cb_Tract_i(Fl_Button*, void*);
  static void cb_Tract(Fl_Button*, void*);
  void cb_m_roi_auto_i(Fl_Counter*, void*);
  static void cb_m_roi_auto(Fl_Counter*, void*);
  void cb_m_roi_auto1_i(Fl_Counter*, void*);
  static void cb_m_roi_auto1(Fl_Counter*, void*);
public:
  Fl_Counter *m_roi_auto[3];
private:
  void cb_m_roi_auto2_i(Fl_Counter*, void*);
  static void cb_m_roi_auto2(Fl_Counter*, void*);
  void cb_2_i(Fl_Button*, void*);
  static void cb_2(Fl_Button*, void*);
  void cb_3_i(Fl_Button*, void*);
  static void cb_3(Fl_Button*, void*);
public:
  Fl_Group *m_configBackTrace;
private:
  void cb_show1_i(Fl_Button*, void*);
  static void cb_show1(Fl_Button*, void*);
  void cb_clear1_i(Fl_Button*, void*);
  static void cb_clear1(Fl_Button*, void*);
public:
  Fl_Value_Slider *clickedRadius2;
private:
  void cb_clickedRadius2_i(Fl_Value_Slider*, void*);
  static void cb_clickedRadius2(Fl_Value_Slider*, void*);
public:
  Fl_Button *GeoPathButton;
private:
  void cb_GeoPathButton_i(Fl_Button*, void*);
  static void cb_GeoPathButton(Fl_Button*, void*);
public:
  Fl_Button *GeoPathFloatButton;
private:
  void cb_GeoPathFloatButton_i(Fl_Button*, void*);
  static void cb_GeoPathFloatButton(Fl_Button*, void*);
public:
  Fl_Value_Slider *m_h;
  Fl_Value_Slider *m_sigma;
  Fl_Value_Slider *m_metodo;
  Fl_Value_Slider *m_metodo_pto_intermedio;
private:
  void cb_4_i(Fl_Button*, void*);
  static void cb_4(Fl_Button*, void*);
  void cb_5_i(Fl_Button*, void*);
  static void cb_5(Fl_Button*, void*);
public:
  Fl_Group *configDTI;
private:
  void cb_FA_i(Fl_Button*, void*);
  static void cb_FA(Fl_Button*, void*);
  void cb_RA_i(Fl_Button*, void*);
  static void cb_RA(Fl_Button*, void*);
  void cb_MD_i(Fl_Button*, void*);
  static void cb_MD(Fl_Button*, void*);
  void cb_Color_i(Fl_Button*, void*);
  static void cb_Color(Fl_Button*, void*);
  void cb_Cl_i(Fl_Button*, void*);
  static void cb_Cl(Fl_Button*, void*);
  void cb_Cp_i(Fl_Button*, void*);
  static void cb_Cp(Fl_Button*, void*);
  void cb_Cs_i(Fl_Button*, void*);
  static void cb_Cs(Fl_Button*, void*);
  void cb_Eig_i(Fl_Button*, void*);
  static void cb_Eig(Fl_Button*, void*);
  void cb_Eig1_i(Fl_Button*, void*);
  static void cb_Eig1(Fl_Button*, void*);
  void cb_Eig2_i(Fl_Button*, void*);
  static void cb_Eig2(Fl_Button*, void*);
  void cb_Dxx_i(Fl_Button*, void*);
  static void cb_Dxx(Fl_Button*, void*);
  void cb_Dxy_i(Fl_Button*, void*);
  static void cb_Dxy(Fl_Button*, void*);
  void cb_Dxz_i(Fl_Button*, void*);
  static void cb_Dxz(Fl_Button*, void*);
  void cb_Dyy_i(Fl_Button*, void*);
  static void cb_Dyy(Fl_Button*, void*);
  void cb_Dyz_i(Fl_Button*, void*);
  static void cb_Dyz(Fl_Button*, void*);
  void cb_Dzz_i(Fl_Button*, void*);
  static void cb_Dzz(Fl_Button*, void*);
  void cb_6_i(Fl_Button*, void*);
  static void cb_6(Fl_Button*, void*);
public:
  Fl_Group *configFilterDWI;
  Fl_Value_Slider *m_rade;
  Fl_Value_Slider *m_radf;
  Fl_Value_Slider *m_iter1;
private:
  void cb_7_i(Fl_Button*, void*);
  static void cb_7(Fl_Button*, void*);
  void cb_8_i(Fl_Button*, void*);
  static void cb_8(Fl_Button*, void*);
public:
  Fl_Group *configDTIMeasures;
  Fl_Check_Button *m_ROImeasure[11];
  Fl_Check_Button *m_Coherence;
private:
  void cb_Compute_i(Fl_Button*, void*);
  static void cb_Compute(Fl_Button*, void*);
  void cb_Show_i(Fl_Button*, void*);
  static void cb_Show(Fl_Button*, void*);
  void cb_Save_i(Fl_Button*, void*);
  static void cb_Save(Fl_Button*, void*);
  void cb_Deselect_i(Fl_Button*, void*);
  static void cb_Deselect(Fl_Button*, void*);
  void cb_Select2_i(Fl_Button*, void*);
  static void cb_Select2(Fl_Button*, void*);
public:
  Fl_Check_Button *m_Fiber_measure[10];
private:
  void cb_Compute1_i(Fl_Button*, void*);
  static void cb_Compute1(Fl_Button*, void*);
  void cb_Save1_i(Fl_Button*, void*);
  static void cb_Save1(Fl_Button*, void*);
  void cb_Show1_i(Fl_Button*, void*);
  static void cb_Show1(Fl_Button*, void*);
  void cb_Deselect1_i(Fl_Button*, void*);
  static void cb_Deselect1(Fl_Button*, void*);
  void cb_Select3_i(Fl_Button*, void*);
  static void cb_Select3(Fl_Button*, void*);
  void cb_9_i(Fl_Button*, void*);
  static void cb_9(Fl_Button*, void*);
  void cb_a_i(Fl_Button*, void*);
  static void cb_a(Fl_Button*, void*);
public:
  Fl_Browser *m_dataBrowser,*m_tensordataBrowser,*m_modeldataBrowser;
typedef itk::DTITensor<float> TensorPixelType;
typedef itk::Image< float, 3 >    InputImageType;
typedef itk::Image<TensorPixelType, 3> TensorImageType;
typedef itk::DWImages<float, 3> DWImagesType;
typedef fltk::MyImageViewer<float,unsigned char>     MyViewerType;
  Fl_Choice *m_op1,*m_op2,*m_destino;
  unsigned int m_activeinput;
  int m_active_roi;
  int m_colorvalue;
  MyViewerType** ImageViewer;
  Viewer3D* ImageViewer3D;
  Fl_Group* m_configIO;
  Fl_Group* ActiveGroup;
  Fl_Text_Buffer* m_buff[19];
  Fl_Text_Buffer* m_buffNfibers;
  Fl_Text_Buffer* m_bufferROIsText;
  Fl_Text_Buffer* m_bufferROIsMeasuresText;
  Fl_Text_Buffer* m_sbuff;
  Fl_Double_Window* panelMeasures;
  Fl_Double_Window* panelROIsMeasures;
  Fl_Text_Display** Mdisplay;
  Fl_Text_Display* m_fibersText;
  Fl_Text_Display* m_ROIsText;
  char *m_filename;
  virtual void Show(void);
  ~TensorGUI();
  virtual void geodesicPath3D();
  void SetActiveInput(unsigned int &a);
  void SetTensorDataBrowser(Fl_Browser* a);
  void SetDataBrowser(Fl_Browser* a);
  void SetModelBrowser(Fl_Browser* a);
  void SetOp1(Fl_Choice* a);
  void SetOp2(Fl_Choice* a);
  void SetDestino(Fl_Choice* a);
  void SetImageViewers(MyViewerType** a);
  void SetImageViewer3D(Viewer3D* a);
  void SetActiveGroup(Fl_Group *a);
  void SetConfigIO(Fl_Group *a);
  void SetPanelMeasures(Fl_Double_Window *a);
  void SetMdisplay(Fl_Text_Display **a);
  void SetFibersText(Fl_Text_Display *a);
  void SetPanelROIsMeasures(Fl_Double_Window *a);
  void SetROIsText(Fl_Text_Display *a);
  virtual void CreateStreamLine(void);
  virtual void CreateStreamLineNew(void);
  virtual void CreateStreamLineFloat(void);
  virtual void CreateStreamLineStraight(void);
  virtual void Mascara(TensorImageType::Pointer,InputImageType::Pointer);
  virtual void ColorOrientation(void);
  virtual void RungeKuttaTractography(void);
  virtual void ShapeCoefficients(TensorImageType::Pointer,int,int);
  virtual void FilterDWI(DWImagesType::Pointer);
  virtual void ComputeScalarValue( unsigned int scalar, const char* nameScalar, unsigned int window );
  virtual void BruteForceTractography(void);
  virtual void SelectFiberTracts(int);
  virtual void SetFibersColor(void);
  virtual void RungeKuttaTractographyWithConnection(void);
  virtual void RegisterSeedsToData(void);
  virtual void CreateAutomaticFiberTract(std::vector<unsigned int>);
  virtual void CreateAutomaticFiberTractRuben(std::vector<unsigned int>);
  virtual void LoadROIS();
  virtual void SelectFiberTractsConnection(int, int, std::vector<int>);
  virtual void SelectAutoFiberTracts(int);
  virtual void SetFibersColor(int);
  virtual void EvaluateTractRegion(std::vector<unsigned int>, std::vector<unsigned int>, bool);
  void ShowMeasures();
  void ShowROIsMeasures();
  virtual void ComputeFiberMeasures(bool);
};
#endif
